x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: SQL Injection ---

著者：えいる

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに 

　ども、お久しぶりです。えいるです。
　といってもまだ2回目なのですけどね。よろしくお願いします。さて今回のWiz
ard Bibleが30回目で、めでたいなというわけで久しぶりに書かせてもらおうかな
と思ったわけです。本業のほうから色々ネタになりそうなことやってるんですけ
どね･･･。まぁいずれ。

　というわけで今回はSQL Injectionのお話です。初心者向けな感じで、何回かに
分けて攻撃手法と対策を紹介できればと思います。当然ながらwebアプリケーショ
ンを想定しているので、今回用意した環境はPHP5、MySQL5、Apachです。
　そういうわけなので、読み進めるにはSQLとPHPのコードを読めるくらいの知識
が必要になります。といってもどんなものか知らない人でも流し読みできるくら
いの解説はするので、よかったらぜひ読んでいただければと思います。
　今回のサンプルは以下のファイルにおいておきますので良かったら:-)

http://nagakura.mints.ne.jp/wb30/sample.zip


■0x02.) SQLとは？

　SQLとは、「Structured Query Language」（構造化問合せ言語）のことでデー
タベースを扱う言語です。基本的にプログラムから呼ばれて、データベースにア
クセスするために使われます。最近のWebアプリケーションにはデータベースが使
われることが多く、個人的にはWebプログラミングをする上で必須な知識だと思い
ます。


■0x03.) SQLInjectionとは？

　Webサイト上のフォームから管理者が意図しないSQL文を実行する行為のことを
いいます。数年前からいわれているのですが、未だにこの脆弱性からの個人情報
流出などがニュースになったりするあたり、まだまだ現役の攻撃方法といえるで
しょう。

　それでは、簡単なサンプルを見ながら解説していきます。


■0x04.) ログイン処理回避

　よくあるWebサイトのログイン画面だと思ってください（図1参照）。なお今回
はサンプルなので、ログインに成功しても他の画面に遷移せず、フォームの上部
に実行されたSQL文とログイン処理の結果が表示される仕組みになっています。

（図1）http://nagakura.mints.ne.jp/wb30/wbsample1.JPG

　詳しくは以下アドレスに置いてあるソースコードを見てください。色々このコ
ードには問題があるのですが、その辺の話題はそのうち。ということで先に進み
ます。

　そこでログイン処理ということで、正しいユーザ名とパスワードが入力された
場合にログイン成功、間違った場合はログイン失敗と表示されます。

　とりあえず適当に入力してみましょう。ユーザ名に"test_name"、Passwordに
"test_pass"と入力した場合、変数$f_nameと$f_passに画面から入力された値が代
入されるため、次のSQLが実行されます（図2参照）。

-----
SELECT id * FROM users WHERE name = 'test_name' AND password = 'test_pass'
-----

（図2）http://nagakura.mints.ne.jp/wb30/wbsample2.JPG

　このときレコードが存在すればログインに成功します。当然この場合はユーザ
名、パスワードが存在しないのでログイン失敗となります。今度は存在するユー
ザ名"naga"とパスワード"nagapass"を入力してみましょう。すると画面にログイ
ン成功と表示されます（図3参照）。

（図3）http://nagakura.mints.ne.jp/wb30/wbsample3.JPG

　しかしこのプログラムは画面からの情報をそのまま使っているため、ユーザが
任意のSQL文を実行できるという脆弱性が存在します。
　例えば悪意のあるユーザが

-------------------------------------------
ユーザ名：a' OR 'a'='a' #
-------------------------------------------

と入力すると、実行されるSQL文は以下のようになります。

-------------------------------------------
SELECT id * FROM users WHERE name = 'a' OR 'a'='a' #' AND password = ''
-------------------------------------------

　'a'='a'の条件を満たすため常にログインに成功してしまうわけです（図4参照）。
"#"という記号はmysqlのコメントで、以降の文字列をすべて無効にします。

（図4）http://nagakura.mints.ne.jp/wb30/wbsample4.JPG

　他にもコメントを使用せずに

-------------------------------------------
ユーザ名：a' OR 'a'='a
パスワード：a' OR 'a'='a
-------------------------------------------

と入力すれば

-------------------------------------------
SELECT id * FROM users WHERE name = 'a' OR 'a'='a' AND password = 'a' OR 'a'='a'
-------------------------------------------

となるため、やはりログインに成功してしまいます（図5参照）。

（図5）http://nagakura.mints.ne.jp/wb30/wbsample5.JPG

　ログインしたあとはパスワードを変更したり登録メアドとパスワードリマイン
ダを好きなように変更してみたり、といろいろできますね:-)

　このように、SQL Injectionの脆弱性があるサイトの場合、通常の処理を回避す
ることができます。さすがに現在では今回の例が成功するサイトはほとんありま
せんが、SQL Injectionはこのような感じで行われます。

　対策としては、特殊文字のエスケープや、プリペアドステートメントを使うな
どがあり、次回以降で詳しく説明できればと思います。今回取り上げられなかっ
た例なども次回以降に少しずつ説明できればと思います。


■0x05.) 終わりに

　今回はSQL Injectionの基本ということで、とても簡単な例を紹介しました。S
QL Injectionは任意のSQL文が実行できるという特性のため、多様な攻撃方法が存
在します。次回はもう少し難易度の高い攻撃方法や対策を紹介しようかなと思い
ます。
　それでは、また次回よろしくお願いします。

　感想や要望などあれば気軽にメールください:-)

mail:mr_clifton@hotmail.com
web:http://d.hatena.ne.jp/nagakura_eil/


