x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: Windowsシステムプログラミング Part1　〜イントロダクション〜 ---

著者：Kenji Aiko

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　このテキストは、Windowsシステムに関するプログラミングを中心に記述してい
る。他プロセスへのコード注入、APIフック、サービス制御マネージャ、カーネル
レベルプログラミング、任意のコードの隠蔽などを中心に解説している。


■0x02.) 任意のコードを別のプロセスへ注入する方法

　http://www.codeproject.com/threads/winspy.asp

　上記のサイトには「任意のコードを別のプロセスへ注入する方法」として、3つ
の手法が紹介されている。

1.SetWindowsHookExを用いてグローバルフックし他プロセスへDLLをマッピング
2.CreateRemoteThreadとLoadLibraryを使い他プロセスへDLLをマッピング
3.CreateRemoteThreadとWriteProcessMemoryを使い他プロセスへコードを注入

　1と2に関しては、任意のコードをDLLとして用意し、そのDLLを他プロセスへマ
ッピングすることにより、目的を実現している。3に関しては、DLLとしては用意
せず、他のプロセスにコードを割り込ませるためのメモリ領域を確保させ、その
領域に、こちらが用意したコードを注入し実行させることにより、目的を実現し
ている。
　2に関しては「常駐プログラム隠蔽テクニック」にて、3に関しては「KeyLogge
rとプロセス隠蔽についてのまとめ」にて詳細を紹介している。

　常駐プログラム隠蔽テクニック
　http://ruffnex.oc.to/kenji/text/dll_inj/

　KeyLoggerとプロセス隠蔽についてのまとめ
　http://ruffnex.oc.to/kenji/thekeylogger/keyLoggerTH.cpp


■0x03.) APIフックからのアプローチ

　任意のコードを別のプロセスへ注入するテクニックは、IAT書き換えによるAPI
フックのテクニックと似ている。APIフックにも様々なアプローチが存在するが、
SetWindowsHookExを用いて他のプロセスへDLLをマッピングさせ、そのDLL内部で
フック処理（IATを書き換える処理）を実行することで、APIの監視を実現するテ
クニックがある。これについては、Jeffrey Richter氏の著書「Advanced Window
s」にて、詳細に記述されている（ただし「Advanced Windows」に書かれているテ
クニックは、Windows 2000までを対象としているため、XP以降では少々プログラ
ムを変更する必要があるかもしれない）。
　また、私も「Windows API Hooking Tutorial」にて簡単な解説をしている。

　Windows API Hooking Tutorial
　http://ruffnex.oc.to/kenji/text/api_hook/

　「プロセスを隠蔽する」という目的においても、APIフックはなかなかの効果を
発揮する。例えば、ネイティブAPIであるNtQuerySystemInformationをフックする
ことで、任意のプロセスを隠蔽できる。実証コードは以下。

　http://ruffnex.oc.to/kenji/win/HideProcess.zip

　このテクニックを使えば、タスクマネージャやプロセス列挙APIからは完全に隠
れる。ただし、SetWindowsHookExを用いたAPIフックを使っているため、全プロセ
スにDLLが注入されている。つまり、どんなDLLを利用しているのかを調べれば簡
単に特定できる。デバッガを起動し、現在起動中の適当なプログラムにアタッチ
してインポートしているDLLを調べれば、APIフックを行っているコード（DLL）を
発見できる。

　NtQuerySystemInformationをフックしてプロセスを隠蔽するというアプローチ
を、カーネルモードで実装することもできる。カーネルモードでのAPIフックは、
ユーザモードとは違ったテクニックが必要となるが、カーネルモード（ドライバ）
でNtQuerySystemInformationをフックし、任意のプロセスを隠蔽すれば、DLLを使
用していない以上、ユーザランドから、隠蔽を行っているプログラムを特定する
のは困難になる。
　ドライバからのプロセス隠蔽については、私のブログにて、sp氏がコメントし
てくれた。sp氏が書いた実証コードは以下。

　http://sp-.up.seesaa.net/image/Mizinger_SRC.zip

　これはとても面白いコードである。
　ぜひとも一度読んでみてほしい（sp氏thax!）。


■0x04.) サービスプロセス

　プロセスを隠すという意味では、サービスプロセスとして登録するのもひとつ
の方法かもしれない。Windows 9x系ならば、以下のコードで、プロセスをサービ
スプロセスとして登録できる。

-----  Windows 9x系でのサービス登録
HMODULE hKernel32 = GetModuleHandle(_T("kernel32"));
typedef DWORD (WINAPI *REGISTERSERVICEPROCESS)(DWORD, DWORD);
REGISTERSERVICEPROCESS RSProcess = (REGISTERSERVICEPROCESS)
    GetProcAddress(hKernel32, "RegisterServiceProcess");
if( ! RSProcess )
    return(-1);
RSProcess(NULL, 1);
-----

　Windows 2000以降では、サービス制御マネージャを使うことで、サービス登録
ができる。サービス制御マネージャについては、常岡伸二氏の著書「スタンダー
ド Visual C++」にその詳細が書かれている。
　Windows 9x系でのサービス登録については以下のサイトが参考になるだろう。

　http://www7a.biglobe.ne.jp/~tsuneoka/win32sub/8.html

　サービスプロセスとして稼動させたら、少なくともタスクマネージャからは見
えなくなる。しかし、サービス自体は、Windowsが提供しているインターフェース
であるため、それほどテクニカルではない。あくまでも方法のひとつということ
だ。


■0x05.) カーネルレベルからのアプローチ

　「任意のコードを隠す」ということに重点を置けば、ドライバを作成した方が
よい。ユーザモードで動作するプログラムは、すべて「プロセス」という形でOS
から完全に管理されるため、隠すためには、サービスとして動作させるか、コー
ドを他のプロセスへ入れるしかない。しかし、カーネルレベルならば、その制限
はかなり緩くなるため、また、違ったアプローチを取れる。
　カーネルモジュールを参照するには、「Device Tree」や「WinObj」また「Ice
Sword」といったソフトが必要だが、少なくとも一般的に使用されているWindows
に、これらのソフトがインストールされているとは思えない。それだけでも隠蔽
するという意味では、ポイントが高い。しかし、なるべくならこれらのツールで
も確認できない方がよいだろう。そのために、カーネルレベルでの隠蔽工作が必
要となる。

　もっとも有名なテクニックは、カーネル内に存在するモジュールリストの読み
飛ばしだ。カーネル空間には、現在動作中のドライバの数だけ、モジュールのエ
ントリ情報が存在する。エントリとは、モジュールの情報が格納される領域のこ
とで、例えば、読み込んだドライバのファイル名や、ファイルパス、それに読み
込んだ先のメモリアドレスなどが記憶される。
　ドライバが読み込まれるごとに、その読み込まれたドライバのモジュール情報
が、エントリとして追加され、逆に、ドライバがメモリから解放されたら、エン
トリも削除される。そして、エントリ情報は、Windowsが一括管理しやすいよう、
連結リスト構造になっている。
　モジュールエントリには、次のエントリへのアドレス（Flink）と、前のエント
リへのアドレス（Blink）が記されており、DriverEntry関数の引数として渡され
るDRIVER_OBJECT構造体から、自分自身のエントリアドレスが取得できる。つまり、
自分のエントリを出発点として、これらを左右に辿ることで、すべてのエントリ
を参照できる。
　この連結リストの中から、任意のドライバプログラムのエントリを外せば、そ
のドライバプログラムに対して、システムからアクセスできなくなる。
　この方法により、「IceSword」からの閲覧を拒否できる。
　エントリ情報を格納すべき構造体を次に示す。ちなみに、モジュールのエント
リ情報は非公開のものであり、マイクロソフトから正式な定義を提示されたわけ
ではないため、内容に差異があるかもしれない。

-----
typedef struct _module_entry
{
    LIST_ENTRY list;        // モジュールリスト
    DWORD unknown1[4];
    DWORD base;
    DWORD driver_start;
    DWORD unknown2;
    UNICODE_STRING path;    // システムファイルパス
    UNICODE_STRING name;    // ドライバ名

} MODULE_ENTRY, *PMODULE_ENTRY;
-----

　最初のLIST_ENTRY構造体内部にて、左右のエントリのアドレスが格納されてる。
また、システムファイルのパスとドライバ名もある。他の部分は推測だが、読み
込まれたメモリのベースアドレスやエントリポイントなどの領域もあると考えら
れる。
　ただし、重要なことは、このエントリ情報の内容ではなく、エントリそのもの
を書き換えること。自身のエントリから、左右のエントリを書き換え、自身を隠
すコードを考える。

-----
driverData = *((MODULE_ENTRY **)((DWORD)pDriverObject + 20));
if(driverData != NULL){
    *((PDWORD)driverData->list.Blink) = (DWORD)
        driverData->list.Flink;
    driverData->list.Flink->Blink = driverData->list.Blink;
}
-----

　最初に、自身のエントリのアドレスを、DRIVER_OBJECT（pDriverObject）から
もらい、そのエントリアドレスをdriverDataとする。そして、まずは自身のエン
トリのLIST_ENTRYを参照し、その「Flink（次）のアドレス」を、自身の「Blink
（前）が指す先」に代入する。これで、自分の前のエントリは、自分の先のエン
トリを指すことになる。次に、自分の先のエントリのBlink（前）の値を、自分の
前のエントリの値に変更する。これで、連結エントリから自分が排除されたこと
になる。
　これにより、この連結エントリを辿ることでカーネルモジュールを参照する手
法をとっているプログラムからは、自身を隠蔽できる。

参考：Phrack 62（http://www.trust-us.ch/phrack/show.php@p=62&a=12）


■0x06.) 非公開APIからのアプローチ

　非公開APIであるZwSetSystemInformationを使えば、ドライバプログラムをいと
も簡単に隠蔽できる。
　ZwSetSystemInformationは、ntdll.dll内に存在するが、マイクロソフトからの
正式なドキュメントが存在しないため、非公開APIとなっている。よって、使用す
るためには引数や戻り値を推測するしかないが、デバッガで関数内を追っていけ
ば、ある程度は使い方を理解できる。
　このAPIはなかなか優秀で、大抵のカーネルモジュール列挙プログラムから、そ
の存在を知られることなく動作させることができる。私が確認した限りでは、「
Device Tree」と「WinObj」では見ることができなかった。
　このAPIの実証コードは以下に公開されている。

　http://www.rit.edu/~jrk9185/rootkit/3/


■0x07.) さいごに

　ここで紹介したテクニックは、どれも数年前までは、ユニークで興味深いもの
だったが、現在では、当たり前に知っておかなければならないものばかりになっ
てしまった。少なくともWindowsシステムに精通している人間ならば、ほとんど知
っている情報だったと思う。
　今回はイントロダクションとして、当たり前のテクニックを紹介するだけに留
まったが、今後はこれらの技術を元に、もう少し進んだテクニックの解析へ進め
ていきたいと思う。



