
#######################################################################

タイトル：仕様の持つ脆弱性
著者；J-Klein

#######################################################################


（１）仕様が持つ脆弱性とは

現在ハッキングやクラッキングと呼ばれるものはソフトウェアのバグを突いたものがもっとも多いように思います。その中でもバッファオーバーフローを利用してシェルコードを実行するのが流行といえるでしょう。このような攻撃はハッキリ言って難しいです。よく掲示板などで「ハッキングってどうやるのですか？」という書き込みを見ますが、ソフトウェアのバグを突きたいのであれば、「勉強しろ」としか言えません。

それに対して『仕様が持つ脆弱性』は利用するのが簡単な場合が多いです。正常な利用方法（または、正常に見える利用方法）でも使う人とアイディアによっては攻撃に繋がるからです。なかなか『仕様の持つ脆弱性』を利用して管理者権限を奪取するような派手なことはできません。それどころかここに書いてあるような事は使い古されたものであり、既に改善されています。

この先何かの仕様を作る機会があった時、何に注意すべきかを知る意味でもここにあるようなことは重要だと考えています。注目すべきことは多くのネットワークの仕様が出来た当時と現在とでは状況が変わってきていることです。

＃ここでは『仕様』と『ネットワークプロトコル』をほぼ同義として解釈していますが、本質としては『仕様』全般で同じことが言えるでしょう。



（２）SMTP の脆弱性

この Wizard Bible vol.5 で Kenji Aiko 氏による SMTP でのメールアドレスの偽装方法が紹介されていましたが、実際 SMTP はほとんど誰でも偽装メールを送れるのが仕様です。スパムメールが後を断たないことからもわかるでしょう。特に携帯電話ではメールのヘッダを全て見ることが出来ないので、より一層偽装性が増します。この場合、ヘッダを見れない携帯電話の仕様も脆弱と言えるかもしれません。

SMTP はもう一つ弱点を持っています。これは当時は弱点とは思われていなかったのですが、現代では『弱点』と呼んでも差し支えの無いものでしょう。それは SMTP の VRFY と EXPN というコマンドです。

まず、VRFY はユーザ名を確認するためのコマンドです。引数にユーザ名をつけて実行すると存在すればそのユーザのメールアドレスを教えてくれます。これだけなら大きなメリットは得られません。しかし、問題はそのユーザ名を含むユーザが複数いたときのサーバの応答です。仕様上では『複数のユーザが該当する旨を伝えるか、該当するユーザのリストを返すかしてもよい』と規定されているのです。RFC2821 にある例を引用してみます。これは smith というユーザを VRFY で調べたときのサーバの正常な応答です。

-----------------------------
      553 User ambiguous

   or

      553- Ambiguous;  Possibilities are
      553-Joe Smith <jsmith@foo.com>
      553-Harry Smith <hsmith@foo.com>
      553 Melvin Smith <dweep@foo.com>

   or

      553-Ambiguous;  Possibilities
      553- <jsmith@foo.com>
      553- <hsmith@foo.com>
      553 <dweep@foo.com>
-----------------------------

3通りの応答がありますが、1つ目は『複数のユーザが該当する』ことを伝えるだけに留まっていますが、2つ目と3つ目は該当する（smithを含む）ユーザのリストを返しています。これを見れば VRFY を許可しているサーバを見つけたらユーザ名のリストを作成することは難しくないことが分かると思います。

これと同様の危険性を持つのが EXPN コマンドです。これは引数がメーリングリストならばその登録メンバーのリストを返します。VRFY も EXPN もスパムメール送信業者には役に立つコマンドであることはよく分かるでしょう。では実際ユーザ名のリストがあると何が出来るのでしょうか。例えば、サーバが Telnet や ssh などのリモートログインを許可している場合、ユーザのリストがあれば Joe アカウント（ユーザ名とパスワードが同じアカウント）を探すことが容易になります。

幸い、現在ではセキュリティ的な理由によりどちらも許可していないサーバがほとんどです。VRFY を使用できるサーバもたまに見かけますが、嘘の応答（常時「存在する」という応答）をするものがほとんどです。



（３）FTP バウンスアタック

FTP を利用した攻撃の一つに FTP バウンスアタック（FTP Bounce Attack）と呼ばれるものがあります。これを理解するためには FTP のデータ転送形式であるアクティブモードの理解が必要になります。詳細はほかへ譲りますが、簡単にアクティブモードによるデータ転送の方法を説明しましょう。

まず、クライアントはサーバに対して PORT コマンドを利用して「○○○○という IP アドレスの●番ポートにデータを転送しろ」という要求を送ります。そしてクライアントは指定したポートで待機してサーバがそのポートにデータ（ファイルの中身等）を送信します。（宣伝になってしまいますが、私のサイトである http://members.jcom.home.ne.jp/j-klein/security/network-proto-ftp.html にてデータ転送の仕組みを解説しているので参照してください）


この仕組み自体が大きな弱点を生んでいます。これを利用すると SMTP による偽装メールをほぼ完全な匿名メールにすることも可能になるのです。その仕組みを紹介しましょう。まずログインできる FTP サーバを用意します。そして、FTP サーバに接続し、SMTP サーバのあるホスト（HOST B）の IP アドレスの 25 番ポートにデータを送るように要求します。そこに SMTP のメール送信コマンドを含んだファイルを転送させます。（以下の図とデータ参照）

【攻撃の様子】
-----------------------------
HOST A: 攻撃者のホスト
HOST B: SMTP サーバの動いているホスト
FTP-Server: バウンスアタックに利用するFTPサーバ


+-----------+                                +------------+
| HOST A    | - HOST B の 25 にデータを送れ　-> | FTP-Server |
|           | <--------------------- 了解 --- |            |
+-----------+                                +------------+

+-----------+                                +------------+
| HOST B(25)| <---------------------- 接続 -- | FTP-Server |
|           | <----------------- データ転送 -- |            |
+-----------+                                +------------+
-----------------------------

【転送するデータ】
-----------------------------
HELO
MAIL FROM:<sender@mail.com>
RCPT TO:<reciver@mail.com>
DATA
Subject: FTP BOUNCE MAIL
Good bye.
.

-----------------------------

この結果 SMTP サーバは FTP サーバからの接続だと勘違いするので本当の送信者が隠されたことになります。この手法はいろいろと応用が考えられます。例えば nmap ではこれを利用したポートスキャンも実現しています。

この攻撃もまた現在では封じられているケースが多いです。封じる方法もさまざまですが、いくつか見たところではポート指定時に　1-1024 番ポートを指定するとエラーにするものが多かったです。1025 以降なら接続できるので工夫すれば何か出来るかもしれませんね。


（４）r 系コマンドの危険性
r 系コマンドとは rlogin・rsh・rcp 等のコマンドのことです。これらのコマンドはホームディレクトリにある .rhosts ファイルを見てリモートユーザの信頼性を検証します。つまり、.rhosts に記述されたホストのユーザのことは信頼し、認証を行わずにログインすることを許します。例えば以下のような記述の場合

-----------------------------
samplehost1.com user1
samplehost2.com user2
samplehost3.com +
+ +
-----------------------------

samplehost1.com からのアクセスで user1 というユーザであれば認証を行わないことになります。特に注意したいのが最後の 2 行です。この "+" は何でも信じることを意味するので samplehost3.com からのアクセスは 100 ％信じ、挙げ句の果てには最後の行で『すべてのホストから全てのユーザを信じる』と宣言しています。

r 系コマンドの第一の危険性は IP Spoofing によって IP アドレスを詐称することによる信頼の奪取です。第２の危険性は侵入済みの攻撃者が最後の行のように "+ +" という記述を追加してしまうことです。

改善策は r 系コマンドの使用するポートを塞ぐことでしょう。


（５）プロトコルはもともと信頼で出来ている

ここまで見てきた弱点がなぜ存在する（存在した）のか。もともとこれらの仕様はセキュリティに重点をおいたものではないことが原因です。例えば SMTP でユーザが存在するかどうかを調べる VRFY コマンドなどはメールを送らずに相手が存在するかを確認することが出来ますから大変便利です。しかし、メールを送らなくても存在をチェック出来るということは効率良くスパムメールを送ることを助けます。

いままで仕様というものが『効率』や『汎用性』などに重点をおいていたのに対し、これから仕様を制定する時は『安全性』に重点を置く必要があるかもしれません。冗談のような表現ですが、昔の仕様の半分は信頼で出来ているのです。これからの仕様はユーザを疑うことから始まるべきかもしれません。認証の無いサービスは攻撃者も利用し、暗号化されない通信は盗聴されることが前提だと考えるべきでしょう。


（６）最後に
今回は有名な脆弱な仕様を紹介しましたが、機会があれば他の脆弱な仕様を探してみたいですね。なにか面白いものがあったら是非教えて下さい。

では。








