[-]=======================================================================[-]

                              Wizard Bible vol.3

[-]=======================================================================[-]


x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

  ---- 第０章：目次 ---

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

○第１章：LinuxのTOSの考察                            unya 著

○第２章：ソーシャルエンジニアたちの手口                 D 著

○第３章：ハードウェア型キーロガーとログの解読    IPUSIRON 著

○第４章：目指せＰＣテクニカルライター［第三回］       MaD 著

○第５章：お知らせ

○第６章：著者プロフィール



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

 --- 第１章：LinuxのTOSの考察 ---

 著者：unya

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

■0x01.) はじめに

  高機能な事で有名なポートスキャナー「Nmap」が、ターゲットのオペレーティ
ングシステムをLinuxと推測する判断材料のひとつに、Linuxが送信するポート到
達不可エラーパケットのTOS値をみる、というのがあります。周知の通り、Linux
はTOS値に0xc0という値を設定してパケットを送信します。TOSというのは、IPヘ
ッダーの"Type of Service"と呼ばれる部分で、ルーターが対応していればサービ
ス品質機能を提供する、というものです。ここでは、TOSとは何か？などという退
屈な事は書きません。どのような理屈でTOS値に0xc0を設定しているのか、その辺
をみていきましょう。


■0x02.) カーネルからのアプローチ

  まず、Linuxカーネルのソースコードを用意します。使用しているオペレーティ
ングシステムは何でも構いません。WindowsでもMacintoshでも大丈夫です。Linu
xカーネルのソースコードは http://www.kernel.org/ からダウンロード出来ます。

  準備が出来たら始めましょう。今回、参考のためにダウンロードしたカーネル
はlinux-2.4.20.tar.gzです。カーネル全体ではかなり大きなサイズになりますが、
これから参考にしていくソースファイルはふたつだけです。まずはUDPを処理する
udp.cとICMPを発行するicmp.cです。これらのファイルは /linux-2.4.20/net/ipv4/
にあります。

  UDPパケットは、udp.cのudp_rcv()という関数で処理されます。説明のために行
番号を付けています。

-----  (udp.c、左側の数字は行番号)
   884  int udp_rcv(struct sk_buff *skb)
   885  {
   886      struct sock *sk;
   887      struct udphdr *uh;
   888      unsigned short ulen;
   889      struct rtable *rt = (struct rtable*)skb->dst;
   890      u32 saddr = skb->nh.iph->saddr;
   891      u32 daddr = skb->nh.iph->daddr;
   892      int len = skb->len;
   893
            /*
             * UDP長、チェックサム、キャッシュされたPCBとの比較
             * マルチキャスト／ブロードキャストの振り分け
             */

            /* ポート到達不可エラーを発行する */
   931      icmp_send(skb, ICMP_DEST_UNREACH, ICMP_PORT_UNREACH, 0);
   932
   933      /*
   934       * Hmm.  We got an UDP packet to a port to which we
   935       * don't wanna listen.  Ignore it.
   936       */
   937      kfree_skb(skb);
   938      return(0);
            /* 以下 goto 処理部 */
   969  }
-----

  931行目でポート到達不可エラーを発行しています。UDPはポートが閉じている
場合、ICMPタイプ3・コード3のICMPパケットを発行して、その旨を伝えます。で
は、これから実際にICMPを発行している関数に移ってどのようにTOS値を設定して
いるのか、みてみましょう。

  ICMPポート到達不可エラーを発行する関数は391行目から始まります。この関数
は長いので、変数宣言部と実際にTOS値を設定している部分のみを抜き出しました。
399行目で宣言している"u8 tos"が目的の変数です。ちなみに、u8はunsigned char
で8ビット(1バイト)です。

-----  (icmp.c)
   391  void icmp_send(struct sk_buff *skb_in, int type, int code, u32 info)
   392  {
   393          struct iphdr *iph;
   394          int room;
   395          struct icmp_bxm icmp_param;
   396          struct rtable *rt = (struct rtable*)skb_in->dst;
   397          struct ipcm_cookie ipc;
   398          u32 saddr;
   399          u8  tos;
                ^^^^^^^^

                /*
                 * マルチキャスト／ブロードキャストの振り分け
                 * フラグメント状態のチェック
                 */

                /* TOS値設定部 */
   480          tos = icmp_pointers[type].error ?
   481                  ((iph->tos & IPTOS_TOS_MASK) | IPTOS_PREC_INTERNETCONTROL) :
   482                          iph->tos;
   483  
                /* 以下省略 */
   537  }
-----

  ようやく、TOS値を設定している部分に辿り着きました。次のようになってますね。

-----
   480          tos = icmp_pointers[type].error ?
   481                  ((iph->tos & IPTOS_TOS_MASK) | IPTOS_PREC_INTERNETCONTROL) :
   482                          iph->tos;
-----

  このコードを見ると、 "icmp_pointers[type].error" が真ならば 
"(iph->tos & IPTOS_TOS_MASK) | IPTOS_PREC_INTERNETCONTROL)" がTOS値になり、
そうでなければ "iph->tos" がTOS値に設定されるようです。"iph->tos" は受信
したIPヘッダーに設定されていたTOS値です。この判定文が真になるかどうかは、
以下の部分を見れば分かります。

-----  (icmp.c)
   170  struct icmp_control
   171  {
   172          unsigned long *output;          /* Address to increment on output */
   173          unsigned long *input;           /* Address to increment on input */
   174          void (*handler)(struct sk_buff *skb);
   175          short   error;          /* This ICMP is classed as an error message */
   176  };
-----

-----  (icmp.c)
   947  /*
   948   *      This table is the definition of how we handle ICMP.
   949   */
   950   
   951  static struct icmp_control icmp_pointers[NR_ICMP_TYPES+1] = {
   952  /* ECHO REPLY (0) */
   953   { &icmp_statistics[0].IcmpOutEchoReps, &icmp_statistics[0].IcmpInEchoReps, icmp_discard, 0 },
   954   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   955   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   956  /* DEST UNREACH (3) */
   957   { &icmp_statistics[0].IcmpOutDestUnreachs, &icmp_statistics[0].IcmpInDestUnreachs, icmp_unreach, 1 },
   958  /* SOURCE QUENCH (4) */
   959   { &icmp_statistics[0].IcmpOutSrcQuenchs, &icmp_statistics[0].IcmpInSrcQuenchs, icmp_unreach, 1 },
   960  /* REDIRECT (5) */
   961   { &icmp_statistics[0].IcmpOutRedirects, &icmp_statistics[0].IcmpInRedirects, icmp_redirect, 1 },
   962   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   963   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   964  /* ECHO (8) */
   965   { &icmp_statistics[0].IcmpOutEchos, &icmp_statistics[0].IcmpInEchos, icmp_echo, 0 },
   966   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   967   { &icmp_statistics[0].dummy, &icmp_statistics[0].IcmpInErrors, icmp_discard, 1 },
   968  /* TIME EXCEEDED (11) */
   969   { &icmp_statistics[0].IcmpOutTimeExcds, &icmp_statistics[0].IcmpInTimeExcds, icmp_unreach, 1 },
   970  /* PARAMETER PROBLEM (12) */
   971   { &icmp_statistics[0].IcmpOutParmProbs, &icmp_statistics[0].IcmpInParmProbs, icmp_unreach, 1 },
   972  /* TIMESTAMP (13) */
   973   { &icmp_statistics[0].IcmpOutTimestamps, &icmp_statistics[0].IcmpInTimestamps, icmp_timestamp, 0  },
   974  /* TIMESTAMP REPLY (14) */
   975   { &icmp_statistics[0].IcmpOutTimestampReps, &icmp_statistics[0].IcmpInTimestampReps, icmp_discard, 0 },
   976  /* INFO (15) */
   977   { &icmp_statistics[0].dummy, &icmp_statistics[0].dummy, icmp_discard, 0 },
   978  /* INFO REPLY (16) */
   979   { &icmp_statistics[0].dummy, &icmp_statistics[0].dummy, icmp_discard, 0 },
   980  /* ADDR MASK (17) */
   981   { &icmp_statistics[0].IcmpOutAddrMasks, &icmp_statistics[0].IcmpInAddrMasks, icmp_address, 0  },
   982  /* ADDR MASK REPLY (18) */
   983   { &icmp_statistics[0].IcmpOutAddrMaskReps, &icmp_statistics[0].IcmpInAddrMaskReps, icmp_address_reply, 0 }
   984  };
-----

  先の判定文は、struct icmp_control の "error"というメンバ名の変数が真か
負なのかで判定しています。私たちが求めるポート到達不可エラーは以下の部分
です。

-----
   957   { &icmp_statistics[0].IcmpOutDestUnreachs, &icmp_statistics[0].IcmpInDestUnreachs, icmp_unreach, 1 },
                         ^^^
-----

　これを見ると"error"の部分が"1"に設定されています。つまり、ポート到達不
可エラーパケットのTOS値は以下の計算式によって求められます。

-----
tos = (iph->tos & IPTOS_TOS_MASK) | IPTOS_PREC_INTERNETCONTROL);
-----

　マクロを展開しましょう。Linuxマシンでgrepを実行した結果です。

-----
/usr/include/linux/ip.h:33:#define IPTOS_PREC_INTERNETCONTROL      0xc0
/usr/include/netinet/ip.h:172:#define   IPTOS_PREC_INTERNETCONTROL      0xc0
/usr/include/linux/ip.h:23:#define IPTOS_TOS_MASK               0x1E
-----

　この結果から、マクロを展開すると次のようになります。

-----
tos = (iph->tos & 0x1e) | 0xc0);
-----

  ここまで見れば、もう分かるでしょう。私は今回、このコンテンツを書く前に、
日本語のサイトを対象に、LinuxがTOS値に0xc0を設定する謎を調べてみましたが、
数少ないヒットページには、例えば次のように記述されています。

>ICMPポート到達不能メッセージのTOS値をチェックする手法。大半の実装はこの
>フィールドを0にセットするが、Linuxでは値を0xC0（つまり16進数のC0）にセッ
>トする

　さて、これは正しいのでしょうか？

  送信元ホストがTOS値に0xb9を設定して閉じているUDPポートにパケットを送信
した場合、パケットを受信したLinuxはTOS値にどのような値を設定して、ポート
到達不可エラーパケットを発行するのでしょうか？Linuxは次のような計算を行う
でしょう。

-----
tos = (0xb9 & 0x1e) | 0xc0);
            ||
    0xb9 & 0x1e = [0x18]
    [0x18] | 0xc0 = [0xd8] => tos = 0xd8
-----

　この計算結果から、TOS値は0xd8になると予想出来ます。


■0x03.) 実験による検証

　これを確かめてみましょう。使用する"sonic"は私が書いたツールで、現在、公
開／配布はしていません。自分で試してみたい方は"hping"を使用してください。
おそらく同じような事が出来るはずです。hpingは http://www.hping.org/ からダ
ウンロードしてください。

-----
[root@maniac ~]# sonic www.kernel.org --udp --tos 0xb9 -c1
Sonic zeus-pub.kernel.org (204.152.189.116)
356 bytes from zeus-pub.kernel.org (204.152.189.116): icmp: zeus-pub.kernel.org 
udp port 80 unreachable for maniac.30000 > zeus-pub.kernel.org.80: [tos 0xd8] (id 25707, ttl 46, len 356)
-----

　確認出来ました。ホスト"www.kernel.org"は予想通りTOS値に0xd8を設定してい
ます。


■0x04.) まとめ

　このことから分かるように、LinuxはTOS値に0xc0を設定するのではなく、TOS値
が0のパケットを受信したから、送信するTOS値が「0xc0になる」のです。この違い
は覚えておくといいかも知れません。



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

 --- 第２章：ソーシャルエンジニアたちの手口 ---

 著者：D

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　前回はソーシャルエンジニアリングで起こりえる手口を記載させていただきまし
たが、今回も何件か現実に起こりそうな手口を考えてみました。
　というか、業務上で経験した手法を悪用した手口を紹介します。


■0x02.) 成りすましての問合せ

　よくプロバイダに成りすましてＩＤとパスワードを聞き出すというのがあります。
　しかし、ＩＤとパスワードを聞き出す行動は、対会社にしてみれば受けた部署が
悪ければ答えられない状態やすぐにばれる可能性というのが高くなることがありま
す。
　もし、盗聴(パケットの盗聴)だけを考えている人間であれば、会社がどのような
サービスを受けているかさえ知っていればいいと言う話になります。

　では、成りすまして何を質問してくるか？

　例えば、サービスプロバイダに成りすましたと考えた場合
「○○○○(プロバイダ名)ですが、ネットワーク管理者の方をお願いします」
(ネットワーク管理者に電話が変わる)
「○○○○(プロバイダ名)ですが、最近ネットワークのトラフィックが上がったよ
うですが何か特別なものを構築されましたか？」
(特別なもの？)
「はい、インターネットＶＰＮですとかそのようなものを構築されませんでしたか
？」
･･･

　上記の対応で構築をしたと答えられれば、構築したシステムなどを質問します。
　構築していないと答えれば、ウィルス関係かもしれないので構築されているサー
バとそれに割り当ててあるサーバの種類を教えて欲しいなどと聞き出します。

　常識で考えるのであれば、サービスプロバイダが直接そのような質問をするわけ
がありません。
　確かに最近はウィルス／ワーム感染によりトラフィックが上がってしまいネット
ワークが落ちる会社があるのは事実です。
　しかし、それをサービスプロバイダが心配して連絡をしてくることなどよほどの
大きな会社(契約)でない限りありえません。こんなことを質問してきたら、「そん
なことを答える必要はあるのですか？」と逆に質問してみることと、折り返し連絡
のために連絡先を聞くことをお勧めします。


■0x03.) 自分の会社の内部だけから情報が漏れるわけではない

　自分達が漏らさなくても外部から情報が漏れることもあります。
　例えば、システムやネットワークを構築した会社がだまされて漏洩してしまうと
いうのがそれに該当します。

　私は職業柄、正規にクライアントから依頼を受けて外部の会社に質問を行ったり
するのですが、これを悪用すると情報を全て知ることが出来ます。対象会社のシス
テム構築会社を何らかの方法で知ることが出来た場合を想定すると以下のようなこ
とが考えられます。

成りすましＡ(以下Ａ)：「○○株式会社といいますが、弊社のシステムを構築され
た方はいらっしゃいますでしょうか？」
構築会社Ｂ(以下Ｂ)：「構築担当者の名前はわかりませんでしょうか？」
Ａ：「すいません。ちょっと分からないんですが、”た”なんとかさんだったかな
ぁ？違ったかなぁ？」
Ｂ：「少々お待ち下さい確認してみます。」（Ｂ電話を保留。その後、人が替わる）
Ｂ：「お待たせしました。”××”ですが」
Ａ：「○○株式会社の"△△"といいますが、システムのことで聞きたいのですが」
Ｂ：「あれ？担当は"□□"さんではありませんでしたか？」
Ａ：「すいません。"□□"は退職することになり、私がやることになりまして」
Ｂ：「そうですか」
Ａ：「で、新しく事務所を開設してシステムに追加したいのですが"□□"から何も
引き継ぎ資料が無いのですよ。概略でいいので資料が欲しいのですが」
Ｂ：「わかりました。ですが、概略といわれましても全てとなるとかなりの量のも
のになりますが？」
Ａ：「ネットワーク構成と新規に事務所を開設した場合どのＩＰアドレス帯が使用
可能かだけがとりあえず欲しいですね」
Ｂ：「わかりました。では、資料を送付させていただきますね」
･･･

　後はどこかのＦＡＸを無断で使用したり、家に送って欲しいといって違法で入手
したメールアドレスを使用して資料を入手することができます。

　構築会社もお客様が相手なのであまり疑いません。
　しかも、更なる利益の取得できると思い喜んで教える可能性もあります。
　どんなに内部のセキュリティを高めたり、情報漏洩しないように周知したとして
もこればかりはどうにもならない場合があります。
　構築会社とのやり取りも不便が多くなるとは思いますが、何らかの手順を考えて
それ以外は応対しないように徹底しておく必要があると思います。


■0x04.) 防ぎようが無いと思う･･･

　最も防ぎようが無いものとして「酒の席で誰かがぺろっとしゃべってしまうもの
」があります。これです。

　私ですら会社の中の人間との飲み会であればしゃべることがあります。というか、
しゃべらざるを得ないときがあります。これを録音されていたりしたらとんでもな
いことになりかねません。管理者の方や構築者の方は飲み会の席では仕事の話はし
ないようにしましょう。


■0x05.) まとめ

　以上の手口は、私が業務を行う中でこれを悪用した場合･･･と考えて作り出した
机上の空論であります。
　しかし、十分に有り得るインシデント（事例）だと考えられます。

　特に、最近はマルチベンダが主流なのでネットワーク構築とシステム構築はそれ
ぞれ別の構築会社としているところが多いです。そうすることで業界の技術向上が
図れるのはいいことなのですが、別にすることで工事区分が難しくなり、問合せ先
が多くなるのも実際の話であり、これにより誰が本当の問合せであるかわからない
場合があるのも事実です。
　出来る限り、ネットワークとシステムは会社を切り離さない方がいいのかもしれ
ません。もしくは、ネットワーク、システム、それぞれの構築会社を引き合わせて
セキュリティ面の連携を強める試みを図るといった行動を取るべきだと思います。

　私がＩＤ、パスワードの取得にこだわらずネットワーク体系の情報取得にこだわ
っている理由として、ＩＤ、パスワードは取得しても利用した場合は法的に問題が
あるが、ネットワーク体系などの情報は提案として活用することが出来、利用した
会社に利益をもたらすものとして考えられるものであり、どこから入手したもので
あるか漏らさずにうまく利用することが可能という点とそれ以外に、ターゲットの
住所(ＩＰアドレス)やセキュリティ情報があれば攻撃をしてネットワークやシステ
ムを止めて会社としての損害を与えるためにはＩＤ、パスワードは不要という点を
考慮しているためです。

　様々な営業利益のために情報を欲しがっている会社があります。

　システム／ネットワーク管理者の方は簡単に情報が漏れないように心掛けましょ
う。



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

 --- 第３章：ハードウェア型キーロガーとログの解読 ---

 著者：IPUSIRON

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　「キーロガーを設置してパスワードを奪った犯人が逮捕」
　こういったニュースがちらほらと最近は見受けられます。彼らはたまたま捕まり
ましたが、実際にはたくさんのキーロガーが氾濫している実態を知っているでしょ
うか？ それを知ったら、「なぜ今更キーロガーなんて取り上げるんだ？ 」という
考えは一変してしまうと思います。

　今月号の記事では、キーロガーの仕組みはざっと簡単に取り上げ、その後、実際
の使われ方、うまくログを入手した次の段階の手法、そして最新のハードウェア型
キーロガーを紹介します。
　特に、ハードウェア型キーロガーによって、今まで比較的安全とされたものが簡
単に奪われてしまうことが明らかにされます。これは実験していた私もちょっとシ
ョッキングでした。ちょっと考えてみると明らかなんですが、意外と盲点だったよ
うです。

　いざ、次の項へ。


■0x02.) 今回用意したモノ

　今回、この記事を書くに当たって使用したハードウェア/ソフトウェアを列挙し
ます。あくまで記事を書くのに使っただけであり、読者の皆さんが実験する時には
この限りではありません。

●用意したハードウェア

・keykatcher
・Windowsと超漢字のデュアルブート可能なPC
・1CD Linux KNOPPIX

●用意したソフトウェア

・テキストエディタ
　Windowsでは秀丸、LinuxではKEdit、超漢字では基本文章編集を使いました。


■0x03.) キーロガーについての復習
　キーロガーとは、キーボードから入力した文字を記録していくプログラムです。
（ソフトウェア型）キーロガーの種類によっては、更新日時、マウス操作なども記
録できます。


■0x04.) ソフトウェア型キーロガーの概要

　ソフトウェア型キーロガーを分類すると、WindowsAPIをフックさせるタイプとキ
ーバッファを直接覗くタイプがあります。

○WindowsAPIをフックさせるタイプ
　これはちょっと分かりにくいかもしれません。簡単に言えば、Windowsを介して
間接的にキー入力を記録するタイプということです。これはアプリケーションの起
動やマウスの動き（右クリックや左クリック）も記録でき、全角のキー入力は全角
のまま記録できます。しかし、或るソフトウェアのアスタリスクでマスクされた部
分がログが取れない場合があります。ちなみに、私が実験したところ、MSNメッセ
ンジャーやWebページの認証のものは基本的に取れるようです。

○キーバッファを直接覗くタイプ
　これは前者のタイプでは記録できなかった入力など基本的に全ての入力が記録で
きます。しかし、半角で記録されるので、前者のタイプのように見やすいログには
なりません。 

　どちらも長所短所があるので、両方のタイプのキーロガーを設置するのが理想的
です。ただし、複数設置するとそのプログラムが動いているプロセス分だけ処理が
重くなります。

　本来はここで、ソフトウェア型キーロガーのインストール方法、操作方法を解説
しますが、本記事の一貫性が崩れてしまうので、省略します。
　詳細を知りたい方は、特別講座＜キーロガー編＞を参考にしてください。

http://akademeia.info/main/lecture3/tokubetu_keylogger.htm

　また、画像付きの解説が読みたい方は、『ハッカーの教科書』あるいは『コンピ
ュータ悪のマニュアル・ビギナーズ』を読んでみてください。


■0x05.)  ハードウェア型キーロガーkeykatcherの紹介

　keykatcherはhttp://www.keykatcher.comで購入できるハードウェア型キーロガ
ーです。ログ容量が32KBのモノが59ドル、64KBのモノが79ドルで購入できます。
　『コンピュータ悪のマニュアル　ビギナーズ』でもキーロガーの項で取り上げま
した。

　今回、実際に２つ購入したので（１つはMaDさんにあげた）、実験結果のレポー
トを発表します。


■0x06.) 接続方法

　keykatcherの取り付け方法は簡単です。

１：ターゲットPCのキーボードケーブルであるPS/2プラグを抜きます。

２：その間にkeykatcherを接続します。

３：これで完了です。簡単ですね。メモリをマザーボードに挿すより、はるかに簡
単です。


■0x07.) keykatcherの操作方法（メインメニュー）

１：keykatcherを使うために、まず最初にテキストエディタを開きます。

２：次に、初期パスワードは「keykatcher」なので、それをテキストエディタ上で
入力します。

３：すると、次のようなメニューが表示されます。

-----
keykatcher 64K 3.7
064859 bytes free
1-View Memory
2-Erase Memory
3-Change Password
4-Disable recording
5-NETPatrol Output
6-Search for String
7-Exit
-----

　１行目はキーロガーのバージョンとタイプを示します。

　２行目ではまだ記録できる容量が示されます。この例では64,859バイト残ってい
ることを意味します。

　出力結果の３行目以降がメニューです。
　１がログ表示、２がログクリア、３がパスワード変更、４がログ記録停止、５が
wwwを含む行周辺、すなわちURLらしき文字列を含む行周辺の列挙、６が特定のキー
ワードを含む行周辺の列挙、７がメニューを抜け出しです。


■0x08.) keykatcherが記録できるモノ

　keykatcherのログを表示させれば（メニューの１番）分かりますが、基本的に全
て半角英数記号で記録されます。そして、バックスペース、改行、スペースも記録
されます。ただし、[Ctrl]キー操作は記録されません。シンプルなので、特定の目
的に使う場合に向き、余分なログを残さないという点では評価できます。

　ソフトウェア型キーロガーではないのでもちろんマウス操作、ウィンドウ操作な
どはログとして残りません。ソフトウェア型キーロガーにも複数の種類が存在しま
すが、キーバッファをキャプチャーするタイプに近いです。


■0x09.) ハードウェア型キーロガーの大きな特徴

　ハードウェア型キーロガーはソフトウェア型キーロガーに比べて有利な点がいく
つかあります。どんな点において有利であるかをここで紹介します。

○BIOSのパスワードを取得
　BIOSのパスワードクラッキングは、ソフトウェア型のキーロガーでは難しいです
が、ハードウェア型のキーロガーだったら簡単にキャプチャーできます。

○ログインパスワードを取得
　電源投入後、システムが立ち上がり、ログイン（ログオン）の認証が始まります
が、この認証時には基本的にソフトウェア型キーロガーは立ち上がっていない状態
なのでキャプチャーできません。
　しかし、ハードウェア型のキーロガーだったら簡単にキャプチャーできます。

○ログ回収が楽
　仮にネットカフェに設置したとします。１回設置したら、後日keykatcher本体を
回収しにいくのではなく、利用客を装い、普通にキーロガーのパスワードを入力し
管理メニューを開きログだけを他のファイルに保存し、ログを消去しておけば、半
永久的に活用できます。

○OSに依存しない
　直接キー入力を記録しているので、OSに依存しません。これはソフトウェア型キ
ーロガーには不可能な大きな特徴です。例えば、Linuxのテキストエディタを開いて、
パスワードを入力すれば、ちゃんとメニューが表示されます。実際に、Windows,L
inux,超漢字で実験したところうまくいきました。

　超漢字の世界にはまだキーロガーはありません（聞いたことがない）が、これで
根底から覆ることが分かります。

○無線との連携でログ回収は遠隔で行える
　ログを自動で無線送信するように改造できれば、わざわざ設置マシンの前に座る
ことなくログを記録できます。
　これは追跡を逃れる手としては非常に有効です。
　ただし、コストの面と比較して得かどうかを天秤にかける必要はあるでしょう。


　一方、ハードウェア型キーロガー故の欠点もあります。

○ネット経由でリモートからログ回収が不可能
　設置箇所がHDの中ではなく、キーボードとマシンの間にあるわけなので、リモー
トから通常は管理メニューを表示させることはできません。

○コストがかかる
　ソフトウェア型キーロガーの場合、何百台に設置しようが根本的にお金はかかり
ません（キーロガーのシェア料金などは計算しない）。
　しかし、ハードウェア型キーロガーの場合、設置する台数分だけコストがかさみ
ます。よって、多くのマシンに設置する場合は、自作するほうが低コストで収まる
と思います。

○ログ表示に時間がかかる
　全部のログをテキストファイルに保存したい場合、メニュー１で新規テキストフ
ァイルにログを全表示してそれを保存する必要があります。これがいちいち表示さ
れていくわけなのでログが膨大だと結構時間がかかります。
　さらに、このログ表示時は他の作業が行えません。なぜならば、他の作業をしよ
うと、他のテキストファイルのウィンドウをアクティブにすると、そこにカーソル
が写ってしまうので、そこにキーロガーのログが表示されてしまうからです。


■0x10.) ログの読み方

　キーロガーの解説、設置方法などを解説している本はたくさんありますが、ログ
の解読方法といったことまで解説した本は少ないように感じます。これからは手口
やテクニックだけではなく、実際に実験した結果分かることやそれ故の苦悩などを
解説していきたいと思っています。

　では、本題に移ります。

　次のログは、この原稿を書きながらキャプチャーしたキーログのほんの一部です。

-----
maru 
OS
ni
izonnsinai 

 W<BS>tyokusetu 
ki-nyuuryokuwo 
kirokusiteirunode ,
sofutouxea 
<BS><BS><BS><BS><BS><BS>OS
ni
izonnsimasenn .
-----

　どんな意味か分かりますか？　英語ではなく、ローマ字のようなので日本語だと
分かります。<BS>はバックスペースを意味します。そして、改行が多用されていま
すが、これはかな変換を確定するために[Enter]キーを入力しているからです。
　また、半角・全角切り替えの[漢字]キー、Windowsメニューを表示する旗マーク
のキー、[PageUp]/[PageDown]キー、[NumsLock]キー、[PrintScreen]キー、矢印キ
ーもログに残りません。
　ただし、かな変換において、候補漢字を探すための[変換]キーあるいは[スペー
ス]キーはログとして残ります。スペースの数で何回変換のためにスペースキーを
入力したのかをカウントできます。

　このログを翻訳すると次のようになります。しかしながら、どの漢字を選択して
いるのかは分からないので、文意から推測することになります。また、マウス操作
によるマウスカーソル移動の可能性も考えられるので、それも考慮しておきます。

-----
●[変換][確定]OS[変換][確定]に[改行]依存しない[変換][確定]
[改行]
　W[BS]直接[変換][確定]キー入力を[変換][確定]記録しているので[変換][確定]、
そのソフトウェア[変換][確定][BS][BS][BS][BS][BS][BS]OS[確定]に[確定]依存し
ません[変換][確定]。
-----

　本当に入力したテキストは次の通りです。

-----
○OSに依存しない
　直接キー入力を記録しているので、OSに依存しません。
-----

　かな変換の記号の違いなどありますが、いい線いっていることが分かります。実
際に手を動かしてみると、結構ログの解読は面倒であることが分かると思います。
　手動でやるのも重要ですが、行数が多くなると大変なので、現在、自動的に翻訳
作業を行うプログラムを作成中です。完成したらサイトで公開します。

　以上でログから内容を翻訳する基本的作業は分かったと思います。


　しかし、これで終わりではありません。今回のログが数行だけだったので楽でし
たが、これが数万行だったらどうしますか？　その中から果たしてパスワードとい
ったクリティカル（致命的な）情報を取得することができるでしょうか。このよう
な問題に対するアプローチを例としてまとめてみました。

例１：目的の文字列を探すのは簡単ですが、目的の文字列が不明でそれを探すとき
は経験が必要です。具体的に言えば、ターゲットのパスワードを入手したいとしま
す。通常パスワードの文字列自体を知らないので、メニュー６で検索することが不
可能です。よって、前後の流れからパスワードやIDだと思われるところを推測する
ことが必要です。

　ID部分がアットマーク（「@」）を含むのならば、メニュー６で「@」を指定して
検索すればよいので簡単です。その直後に来る文字列がパスワードの可能性が高い
と分かります。これはMSNメッセンジャーやYahooメッセンジャーといったメールア
ドレスをアカウントIDとして採用しているところを攻略するには有効な手です。

-----
keykatcher 64K 3.7
063161 bytes free
1-View Memory
2-Erase Memory
3-Change Password
4-Disable recording
5-NETPatrol Output
6-Search for String
7-Exit

6
Enter Search String)6-10 chars+@　←「@[Enter]」を入力。

Searching-Please Be Patient..　←文字列検索開始。
)@ nna  <BS>ga ki-wa-do  <BS><BS><BS><BS><BS>@] [ attoma-ku ( ) wo <BS><BS><BS><BS>
)@ <BS><BS><BS><BS>menyu- 5 <BS>6 de a<BS>[] @wo siteisite kennsakusure
)@ <BS><BS>1: <BS> s  pus<BS><BS><BS>ipusiron@ruffnex.oc.to hogehoge  
-----

　このログから最後の「ipusiron@ruffnex.oc.to hogehoge」部分が怪しいです。
文字列検索の結果は通常のログの出力とは少し異なります。本来のログは
「ipusiron@ruffnex.oc.to[Enter]hogehoge」であって、
「ipusiron@ruffnex.oc.to」直後の空白は本当は無いのに追加されていることがわ
かります。

例２：キーロガーでキャプチャーされていることを前提とします。パスワードには
長い無意味な特殊文字を含む文字列を選ぶようにとたびたび言われています。しか
し、キーロガーを使うアタッカーから見れば、その対処方法は一番最悪であること
が判明します。あなたがアタッカーだと仮定して、キーロガーのログをチェックし
ているとします。そのとき、明らかに文書にならないような文字列があり、さらに
長くて、特殊文字を含んでいたら、これはパスワードだと気づくでしょう。よって、
キーロガーを使用するアタッカーから見れば、日本語に近いパスワードの方が、逆
にパスワードだと気づきにくいわけです。とはいえ、あまりにも簡単な日本語の挨
拶のような文章、あるいは単語にしてしまうと、ディクショナリーアタック（辞書
式アタック）で突破される可能性が高いので、注意してください。

例３：今年キーロガーを使い、不正に取得したネットバンクのパスワードを悪用し、
１千数百万を不正送金した事件がありました。この事件でネットカフェでネットバ
ンクを使うのは危険であるというコメントをした人が多かったですが、本質的な部
分はそんなところにはありません。ネットカフェだろうが社内だろうがどこでも危
険ですので、こんなことは当然のことであって本質とは言いがたいと思われます。
それではどこに事件の本質があったのでしょうか。結論を言ってしまえば、ネット
バンクの認証システムです。ネットバンクの大手のジャパンネットバンク（JNB）
の場合、パスワード認証でログイン後、送金時には対応表を使ったもうワンクッシ
ョン置いた認証があります。今回の事件はシティバンクがターゲットだったわけで
すが、シティバンクには対応表を使った認証がなく、静的なIDとパスワードのみの
アカウントだけで送金まで行えたのが問題だったのです。
　この事件の被害者がネットカフェでジャパンネットバンクのアカウントを利用し
たと仮定します。それならば、キーロガーが設置してあったとしても、おそらく不
正送金はされなかったでしょう。キーロガー設置者がジャパンネットバンクのアカ
ウントは取得できたとしても、対応表の方が突破できないと思われます。対応表の
数字はHTTP（HTTPS）で送られてくるわけなので、どうしてもキーロガーだけの力
では解析が不可能です。トロイの木馬やSnifferによる盗聴、ショルダーハッキング
などを併用しなければ、対応表の求められている数字に対応する変換前数字（変換
元の数字）がアタッカーにばれることはないからです。


■0x11.) キーロガーからの防衛

●ソフトウェア型キーロガーからの防衛

・ウイルススキャンソフトウェアの導入
　キーロガーはウイルスやトロイの木馬に仕込まれている場合があります。このよ
うなキーロガーはウイルススキャンソフトウェアで見つけることができる可能性が
あります。 

　しかし、ここで紹介したIKS v1.2のように意図的にインストールしたキーロガー
は普通のプログラムと同じ扱いを受けるために、ウイルススキャンソフトウェアで
見つけることができません。 

・専用スキャンツールの導入
　そこで、Anti-keylogger（http://www.anti-keyloggers.com/：antikey.zip）と
いうキーロガー発見ソフトウェアを利用することで、もしキーロガーが仕掛けられ
ていても気づくことができます。ちなみに、このAnti-keyloggerはシェアウェアで、
登録前はキーロガー本体の削除はできないが、キーロガーの存在はきちんと認識で
きます。59.95ドルでオンライン販売されています。心配な人は一度試してみて、
もし見つかったら購入を検討してみてはどうでしょうか？ 

・手動による監視
　ウイルスやトロイの木馬に仕込まれているキーロガーは、キー入力の情報を記録
していることを示すものが何もないことが多い。タスクトレイにアイコンがあるわ
けでもないし、場合によっては［Ctrl］＋［Alt］＋［Delete］キーを押したときに
表示される実行中のプロセス表示の一覧にもないことがある（これをステルス機能
と呼びます）。普通の人は全く気付かずにキー入力をし続け、大事なIDやパスワー
ド情報などが送信されてしまうのだ。 

・ポート監視ツール
　メール送信を行うキーロガーだけに効果があります。メールを送信しようとする
時に、キーロガーがネットワーク通信のためにソケットを作ります。そのとき、イ
ンターネット側のSMTPサーバーに接続するわけですが、キーロガー側がクライアン
トとなりポートが開きます。クライアント用なので、1024〜65535のいずれかのポー
トが絶対に開きます。ただし、メール送信の度に使用するポート番号は動的に変化
します。
　この瞬間を見逃さないようにポート監視ツールで常に見張っておくという手も考
えられます。

　Snifferでネットワークのパケットログを監視しても、代用できます。


●ハードウェア型キーロガーからの防衛

・コネクタ周辺のチェック
　keykatcherの場合、PCの背面にあるキーボード用のPS/2に接続されます。よって、
定期的に背面をチェックしておけば一度見たことある人は明らかに分かります。
　しかし、最近は巧妙化しており、キーボードそのものに内蔵されているタイプも
発売されています。
　よって、改造マニアの人ならば、普通に市販されている普通のキーボードにそう
いう仕掛けを施したり、マザーボードに直接はんだ付けすることもできるでしょう。

・USBキーボードを使う
　現在発売されている主流のキーロガーはPS/2に接続するタイプのものなので、U
SBキーボードを使用することで素人アタッカーから防衛することはできます。
　しかし、この防衛方法は消極的なものです。というのも、前述したように、直接
マザーボードなどに仕込まれたり、USBタイプのモノを開発されれば、この防衛方
法はあまり意味がないということになります。

・設置不可能な状況を作る
　ケースを開けることができないようにカギをしたり、背面にはアクセスできない
ようにします。それでも、アタッカーは何らかの盲点をついてハードウェア型キー
ロガーを設置する可能性があります。
　そこで、PCの設置してある部屋にはカギを閉め、ビデオカメラで監視するという、
設置されたとしてもそれを察知する機能を備えておくことが有効です。この方法が
今考えられる防衛方法の中で一番効果的だと思います。


■0x12.) 物事をより知るためのアプローチと脳の各部位に訴えかける文

　物事をより知るためのアプローチは理屈を追っていくという方法があります。つ
まり、理屈の理屈の理屈の…状態に理解するアプローチです。
　例えば、PCの仕組みを完璧に極めることだけに限定したとしても、次のように多
くの事柄を含んでいることが分かります。

○PCの操作方法
→ハードウェアデバイスの制御のためのプログラム
→各電子回路でのデジタルデータのやり取り
→CPUやハードウェアの電子回路の仕組み
→電子部品の性質
→電子部品の実現化の理屈（化学や物理）
→PCのモデルとなったチューリングマシン
→離散数学（⊂応用数学）
→通常の数学（⊃素朴的集合論）
→基礎数学（公理的集合論）

　今回、この記事で採用したアプローチは逆のものです。つまり、ある程度の理屈
で打ち止めして、それの応用の応用の応用の…状態に理解するアプローチです。
　例えば、上記と同様にPCの仕組みからスタートすると、次のようになります。

○PCの操作方法
→ソフトウェアの導入
→ソフトウェアの操作方法
→ソフトウェアを実際に使ったときのテクニックやトラブルシューティング
→ソフトウェアの応用

　もちろん、途中で矢印が枝分かれになることも多々ありますが、この例でイメー
ジは掴めたと思います。

　前者、後者どちらのアプローチもケースバイケースなのですが、特に実践力を重
視した場合、後者のアプローチが有利に働きます。さらに、前者はすでに過去にあ
るものを学ぶということが主体になり、後者はいずれ新しいものを作る・考えると
いうことが主体になります。この点も見逃せません。
　人によっても学習方法のアプローチは異なります。どちらが絶対などありません。
今まで前者のアプローチで文を書いてきましたが、今回はちょっと趣向を変えて後
者のアプローチで書いてみました。


　また、単に右脳・左脳に訴えかける情報だけでなく、右脳と左脳を繋いで左右の
脳の情報交換する脳梁【ノウリョウ】の役目に対応する情報、さらには本能やセン
スを司る視床下部である扁桃体【ヘントウタイ】に訴えかけるような情報を示して
いきたいと思っています（あくまで比喩の話しなので注意してください）。
　人間は、自転車を運転する時、頭で考えずに自然に体重移動で左右に移動してバ
ランスをとります。また、野球のピッチャーがボールを投げて、それを動体視力で
視覚化し、脳で考える前に自然とバットが出て、最終的にホームランを放ちます。
いずれの例が成功するのも扁桃体がうまく機能しているからです。
　理屈を述べた文章は左脳、イラストは右脳、文章が上手い人の文は脳梁に訴えか
けます。しかし、なかなか扁桃体に訴えかけるような文に出会えません。そもそも
そんな文を書くこと自体が可能かどうかも分かりません。可能かどうか分からない
ものがあったら、とりあえず挑戦しておくという信条に則り、これから精進してい
きたいと思います。


　このような点を意識しながら、本文を読んでもらえると、文意をよく理解するこ
とだけでなく、自分のアプローチを見直すのにも役に立つと思います。


■0x13.) まとめ

　どうでしたでしょうか？
　「キーロガーなんて誰でも設置できる」「キーロガーなんて低スキルのやること
だ」なんて思っていた人でも、キーロガーひとつとっても意外に奥が深いこと、解
読テクニックは新鮮だったことだと思えたのではないでしょうか。

　では、vol.4でまた会いましょう。



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

 --- 第４章：目指せＰＣテクニカルライター［第三回］ ---

 著者：MaD

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　前回はプログラムの入れ方について書きました。今回は「画像と本文の連携と画
像ファイルの扱い方」についてです。
　しかし、ネットに置く文書に全角スペースを入れるとブサイクですね。これにつ
いては次回意味がわかるかと思います。


■0x02.) 画像と本文の連携

　画像と本文の連携は、初めて原稿を書く人が一番悩む点です。しかし、ルールを
覚えれば実は簡単なことなのです。このルールとは、著者自身が決めたものでも構
いません。重要なのは、ひとつのスタイルを徹底的に守ることです。
　では、まもなく発売される「トロンの教科書」よりサンプルをひとつ紹介します。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
　　　　　　　　　・・・・・略・・・・・
　これを利用するには、適当なウィンドウへドラッグして仮身を作成してから、ダ
ブルクリックします（図６、図７参照）。

（図６）ftp11 ←接続時
（図７）ftp12 ←接続後

　μFTPを用いて、基本文章編集のファイルを転送すると、バイナリモードで転送さ
れます。それをWindowsでダウンロードして利用するとすると、文字コードの問題で
文字化けします。
　　　　　　　　　・・・・・略・・・・・
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

　このようになります。では、分解します。

●本文指定
　本文の画像指定は簡単です。「ダブルクリックします（図６、図７参照）。」と
いった具合いに「対象本文（図Ｘ）。」とします。
　編集者は、これで画像が含まれることがわかります。

●画像指定
　本文指定の含まれた文章が終わったところで１ライン空けて図の指定を入れます。

（図６）ftp11 ←接続時
（図７）ftp12 ←接続後

　以上の内容の意味をそれぞれ解説します。

・（図６）：画像の下に読者がわかるように入れる番号です。印刷します。
・ftp11：デザイナーに対して渡した図版ファイルのファイル名です。印刷しません。
・←接続後：キャプションといいます。番号の後ろに入れます。印刷します。

　以上で、本文と画像、番号、キャプションが連携するわけです。特にプログラム
を書くことを理解している人は、こういう部分でしっかりとした定義づけをするよ
うに思います。中にはHTMLのタグを応用する人もいます。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
基本文章編集のファイルを転送すると、＜太字＞バイナリモード＜/太字＞で転送さ
れます。
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

　こういう指定はあまり意味を持ちません。デザイナーに対して混乱を招くだけで
す。
　というのは、このような指定は、初校に対して著者がゲラに赤字を入れれば済む
ことなのです。つまり、本が完成するまでの流れを理解しておけば、どの段階でな
にをすべきかが見えてくるということです。このあたりは担当編集と相談して決め
るとよいでしょう。


■0x03.) 画像ファイルの扱い方

　誌面で使用する画像ファイルはPhotoShopの形式ならばどれでも構いません。し
かし、もっともお奨めできる形式は次の通りです。

・JPG（スクリーンショット）72DPI以上
・EPS（イラストなど）150DPI以上

　この二種類は、QuarkXPressでそのまま表示され、印刷まで持っていけるからです。
　特に、カバー画像を含めて、どの画像も最終的には「EPS（JPEG最低圧縮率）」に
変換して印刷をします。

●画像の中に印を入れる
　画像の特定部分に矢印を入れたり、囲んだり、トリミングすることは初校が上が
ってから紙に指定を入れてデザイナーに依頼することもできますが、著者自身が画
像エディタで編集しても構いません。


■0x04.) まとめ

　んなわけで、第三回は終わりです。
　次回はキモとなる「本文の表現」ということで。
　誤字脱字ありませんように〜！
　ライタ〜！　へ〜んたいっ！　とぁっ！(`Д´)



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

 --- 第５章：お知らせ ---

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


○取り扱う具体的な分野は次に示すものです。
・ハッキング（セキュリティネタはこちらに含める）
・クラッキング（ウイルスやトロイの木馬系も含む）
・リバースエンジニアリング（シリアル解析、ゲーム改造、オンラインゲームの
チートを含む）
・コーディング（純粋なプログラミングネタでもクラッキングに近い内容でもよ
い）
・ソーシャルエンジニアリング（開錠技術、侵入技術も含む）
・暗号
・フリーキング（一般電話、携帯電話、公衆電話などの話題や電話システムの話）
・ツール（ツールに特化した話題はこちら）
・ウェアーズ（共有ソフトやエミュレータはこちらに含める）
・ウォッチング（サイトや掲示板のウォッチングネタ）
・ハードクラッキング（自販機、ゲーセンのゲーム機などの怪しい裏技など）

○目標としては、１ヶ月に１回の頻度で発行したいと思っています（予定では毎
月15日に発行）。

○誤植などのお知らせはIPUSIRON宛て（ipusiron@ruffnex.oc.to）にお願いしま
す。

○幅広く初心者から上級者までをターゲット層としたいので、執筆陣に参加した
い方は気軽にメールください。初心者からパワーユーザーまで幅広い層をターゲ
ットにしたいので、マニアックなネタ、読み物系のネタ、初心者向けのネタなど
何でも構いません。オリジナルのネタじゃなくても、読みやすく編集・翻訳した
だけでも十分、一つの記事と言えます。
　別に『Wizard Bible』でチームを組んでいるわけではないので、他のチームに
属している人であっても気にする必要は無いと思います。

　グループやチームに関わらず、自分が興味を持った事柄についてのレポートの
発表の場だと思ってください。

○Wizard Bible（略してWB）の公式サイトは次のURIです。

http://2600ch.com/

　過去の記事を閲覧できるようにしてあります。

○支援者、参加希望者用のスレッドを立てました。

http://ruffnex.oc.to/ipusiron/cgi/forum/patio.cgi?mode=view&no=17



x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

  ---- 第６章：著者プロフィール ---

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

　今回は各著者にオススメの本を一つ選んでもらいました。

■unya
●Job: マッチ売り
●Web: Lunatic Stream (http://lunatic_stream.tn.st)
●Mail: tmlise@yahoo.co.jp
●Team（Group）: Team LISE
●Comment:
  リフレッシュ中のunyaです。メールを下さった方、ありがとう御座いました。
  その内復活したいと考えているので、その節はよろしくお願い致します。
  はい？ナニを畏まっているんだって？そんな事言わないで下さいよ・・
  ネットワーク丸ごと潰すぞゴルゥアヽ( `Д´)ノ
  なんちゃって。
●オススメの本: 絵本『千一夜物語』
  寺山修司 著、イラストを宇野亜喜良が担当している１９６８年発行のマニアッ
クな本です。
  先日、ようやく見つけて即購入。初版だからか７千円。定価３８０円なんですけ
れど。
  寺山修司や宇野亜喜良を知らない、もしくは興味のない人にはどうでもいい本で
しょう。
  だから、別にオススメでもなんでもありません。つーか手に入らないでしょ。


■D
●Job:SE
●Web:SEの小箱（http://iron_beasty.tripod.co.jp/）
●Mail:death_beasty@hotmail.com
●Team（Group）:N/A
●Comment:
　新参者のＤです。
　様々な会社のネットワークの危ない部分を指摘したいと思っています。趣味はヘ
ヴィ・メタルを腹のそこから歌うこと。
　まだまだ勉強が足りないところがあると思いますが、優しい目で見守ってくださ
い。
●オススメ本：『今夜、すべてのバーで』中島らも 著
　先日、麻薬所持で逮捕された中島らも先生の執筆された小説です。
　アルコール依存症である(あった？)先生本人の実体験をもとに書かれた内容で、
この本に出会ったとき私は高校生でしたが酒には溺れないようにしようと固く心に
決めました。
　吉川英治文学新人賞を受賞した一冊です。
　是非、一読してみてください。


■MaD
●Job:DATA HOUSE
●Web:http://www.data-house.co.jp/
●Mail:mad@data-house.co.jp
●Team（Group）:secret
●Comment:
　元ハカージャパソと危ない28号の百円ライター。趣味は、空き缶拾いと牛乳瓶
のフタ集め。２ちゃんねるでは「矢崎マサユキ」、「白鶴・丸」、「大同曲芸人
」、「泥棒・詐欺師」として通っている。ウソばかりつくので友達はいない。
　現在は会社でヒッキーをしているが、将来はネットカフェの店員なるという目
標に向かってまっしぐら。とぁっ！(`Д´)。
●オススメ本：N/A


■IPUSIRON
●Job:サイト更新
●Web:- Security Akademeia -（http://akademeia.info/）
●Mail:ipusiron@ruffnex.oc.to
●Team（Group）:TeamSA
●Comment:
　暑くて暑くて、脳が溶けて何も考えられません。早く涼しくなって欲しいもので
すね。
　著者、読者のおかげで第３回まで無事にやってこれました。これからも誠心誠意
を尽くし、リリースに力を入れていきたいと思います。
　ところで、１０月に『TRONの教科書』発売されるので、興味ある方は宜しくお願
いします。
●オススメ本：『三国志演義』（正史三国志ではない）
　横山光輝の漫画でも、他の人の小説でも良いので、是非読んで欲しいです。登場
する智謀・策略などにも心驚かされます。様々な性格のキャラクター数百人が登場
するので、自分が共感できる武将がきっと見つかると思います。
　三国志に一旦触れておくと、周りの三国志ファンと仲良くなれたり、多数存在す
る三国志ゲームなどを思う存分楽しむことができるという特典もあります。

