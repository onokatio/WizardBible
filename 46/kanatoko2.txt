x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: Keep-Aliveを最適化する ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x00.) はじめに

　今回はLinux上のApacheを前提に、サーバー管理者の立場からHTTPのコネクショ
ン数をコントロールするハックを紹介する。このテクニックは実験的なものであ
り、実環境で使うかどうかはあなた次第である。ちなみに筆者はまだ使ったこと
がないｗ


■0x01.) よくある問題

　そもそもサーバー管理者側でコネクション数をコントロールしたい理由は何だ
ろうか。ウェブサイトへのアクセスが多くなるにつれて、サーバー上で起動され
るApacheのプロセス数が多くなってくる（この記事ではプロセスモデルを使って
いることを前提とする。スレッドを使用する場合はやや話が異なってくる）。こ
のプロセス数の初期値や上限などは設定ファイルで調節することが可能で、Star
tServersやMinSpareServers、MaxSpareServersなどの項目が関係してくる。これ
らの値をうまく設定しないと、サーバーのメモリを有効に使うことができなかっ
たり、あるいはサーバーのメモリを使い切ってしまったりする。

　Apacheの数があらかじめ定められた数に達しており（理想的には、メモリを無
理なく使い切っている状態）、それぞれのプロセスが仕事を行っているときには、
さらに後から接続してきたクライアントからのリクエストはサーバー上で処理さ
れず、待たされることになる。これは好ましくない状況だ。このときユーザのウ
ェブブラウザには当然何も表示されない。そのためユーザは再度F5キーを押した
りして再読込を試みるため、さらに新しいTCP接続が発生し、またその接続も待た
されるという悪循環が発生する。これは非常に好ましくない状況であり、筆者の
ようにホスティングサービスを提供している場合などには顧客から「ウチのサイ
トが見えない。ダウンしているんじゃないか？」とクレームが入ることになって
しまう。

　つまり、ウェブサイトを快適に提供するためには、起動できるApacheのプロセ
ス数の上限に達していないか、あるいは起動しているApacheのプロセスの中に手
が空いているものが存在する必要がある。


■0x02.) 無駄な仕事は何か

　Apacheはブラウザとのやりとりの中でリクエストをパースしたりファイルを読
み込んだりするが、最も無駄な仕事はKeep-Aliveの間の待機である。このときプ
ロセスはTCPコネクションを保持するという目的だけのために起動されており、C
PUは殆ど消費せず、メモリだけを消費し続ける。待機したあげく、ブラウザが何
もリクエストを送ってこなかった場合などは最悪で、ただの待ちぼうけというこ
とになってしまう。アクセスが少ないウェブサーバーならばこれでもまったく問
題ないのだが、混雑している場合にはこのような無駄な仕事を減らす必要がある。

　ではKeep-AliveをOffにしてしまえばよいかというと、そう単純な話ではない。
Keep-AliveがOnになっていることで、ブラウザはひとつのTCPコネクションを利用
して効率的に複数のファイルを読み込んでくれる。最近のウェブサイトではトッ
プページに画像が40個あるようなケースも珍しくないが、このようなサイトでは
Keep-AliveがOnの場合とOffの場合とで、ページが完全に表示されるまでの時間に
大きな差が出る（FirefoxのFirebugプラグインを使うとページが表示されるまで
の時間をミリ秒単位で計測できるので、試してみると楽しい）。

　Keep-Aliveが「おいしい」のは、このように1つのページを開いた際にそこに含
まれる画像ファイルやJavaScriptのファイル、CSSのファイルなどを効率よく読み
込んでくれることだ。そして「おいしくない」のは、ユーザがそのページを読み
込み終わってから、さらに別のページに移動しようとするまでの数秒〜数十秒の
間、ただ待ち続けなければならないことである。

　もちろんKeep-AliveをOffにするという選択肢もある。上に書いたFirebugなど
を使ってページの表示時間を計測した上で、Offにするのもよいだろう。


■0x03.) 現実的な対策

　現実的によくある解は、Keep-Aliveの時間をサーバー側で数秒（2〜5秒くらい）
に設定することである。デフォルトの30秒などの数は長すぎるのだ。この設定に
はKeepAliveTimeout項目が使われる。ブラウザが1ページ目を開き、そこに含まれ
る複数のファイルを続けてダウンロードしていく場合、それぞれのリクエストは
ほぼ間を置かずに連続して処理される。そのため2秒もの間漫然とKeep-Aliveが行
われることは少ないため、「おいしい」部分であるTCPコネクションの再利用はき
ちんと行われる。ページの読み込みが終われば、その後2秒ほど「おいしくない」
時間が経過し、コネクションがサーバー側から切断され、Apacheのプロセスは次
の仕事に取りかかれることになる。この方法は問題なく動作するので、あなたが
今困っているのであればまず試してみるのがよいだろう。


■0x04.) ハック開始

　しかしこの2秒の無駄すらも無くしたい場合はどうすればよいだろうか、という
のがこの記事の趣旨である。Apacheプロセスのもっとも効率がよい動作は次のよ
うになるだろう。あるページを開く際に、Keep-Aliveを活かし、TCPコネクション
を再利用して各コネクションごとに複数のファイルを取得する。そして必要なフ
ァイルがすべてダウンロードされた瞬間に、それらのコネクションをすべて切断
するのだ。

　この動作はサーバー側で実現するのはおそらく無理だろう。まず、1つのページ
にどのようなファイルが含まれるのかを決定するのはクライアント側だからであ
る。ブラウザがHTMLをパースし、その中身を解釈して決めることなのである。そ
のためサーバー側では「コレとコレとコレを送ったらこのページはおしまい」と
決めるのが難しい。さらに、ブラウザは同時に複数のTCPコネクションを使用する。
そのため、仮に「コレとコレとコレを送ったらこのページはおしまい」とサーバ
ー側で決定できるとしても、複数存在するコネクションのうち、どれとどれが同
じブラウザとの通信なのかを正確には判断できないのである。

　そこで、この動作をクライアント側で実現することを考えてみる。

　まず今回は「ページの表示が終わった」タイミングで、アクションを起こした
い。このタイミングはJavaScriptのonloadを使えばよいだろう。そして次に、先
ほどまで使っていた（場合によっては複数の）コネクションを切断したい。これ
はどうすればよいだろうか？


■0x05.) JavaScriptでTCPコネクションを切断する

　JavaScriptは基本的にネットワークのレイヤーに直接アクセスする機能を持た
ない（近いのはXHRだ）。TCPコネクションオブジェクトのようなものは存在しな
いのである。そこで、「まったく関係ないところに新規に大量に接続しちゃう」
というハックを行う。ブラウザにはあるタイミングで使用できるTCPコネクション
の数に上限が設けられており、この数に達した場合にはアイドル状態で仕事をし
ていないコネクションを切断するのではないか？という予想のもとにこのような
事をしてみるのだ。実験してみた結果、見事IE、Firefox、Opera、Safariではう
まく行くようだ。残念ながらChromeではうまくいかないようだが、とりあえずシ
ェアが高いブラウザではうまく行くようなので、なかなか悪くない。

　このとき「まったく関係ないところ」にどこを選ぶかが問題である。JavaScri
ptでは別ホストへのコネクションを生成することは容易だが、今回は大量にコネ
クションを生成するため、他人のサーバーにやってしまうとDoSまがいの攻撃にな
ってしまう。そこで筆者が考えたのは次の2つである。

　まず、同じウェブサーバーの閉じているポートにアクセスを試みさせてみた。
具体的なコードは省略するが、普通にforループの中でImageオブジェクトを生成
し、srcを指定するだけだ。このときサーバー側のポートは閉じておりTCPコネク
ションは生成されないため、サーバー側で無駄にソケットが生成されたりメモリ
が消費されたりすることはない。仮にやる場合は81番〜200番ポートくらいまでを
利用すればよいだろう。この方法はIEとOperaではうまく動作するが、SYNとそれ
に対するRSTが無駄に飛んでしまうのが少々スマートでない。

　FirefoxとSafariではさらによい方法を使うことができる。もうわかった読者も
いるかと思うが、ユーザのlocalhostにアクセスさせるのだ。例えば127.0.0.3な
どの81番〜200番ポートなどに大量にコネクションの生成を試みさせる（ポートは
閉じているので失敗する）。SYNとRSTは実際にはネットワーク上を飛ぶわけでは
ないので処理は一瞬で終わり、無駄が少ない。

　これらの方法により、任意のタイミングでKeep-Alive待機状態のTCPコネクショ
ンをブラウザ側から切断することができる。仮に実際に使う場合には、ウェブサ
イト中のすべてのHTMLページの中でこのコードが動作するように設置することに
なるだろう。


■0x06.) まとめ

　今回はブラウザとApacheの間の無駄なKeep-Alive接続を、ブラウザ上のコード
から切断するハックを紹介した。コネクション数の上限などはブラウザやバージ
ョンによってまちまちであるため、実際に使う場合にはさらに調査し、適切なコ
ードに落とし込む必要があるだろう。

　このテクニックについて福森氏に話したところ、「それってコネクション数に
対するDoS攻撃じゃないですか！」と言われましたがﾅﾆか？(ﾟдﾟ) 



