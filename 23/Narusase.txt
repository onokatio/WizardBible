x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第6章: ハニーポットを作ろう（連載第7回） ---

著者：Narusase

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　前回はhoneydとarpdの連携に関して説明を行い、ちょっとした問題を出題しま
した。今回はその解答とhoneydの仮想ネットワーク機能について説明します。


■0x02.) 解答

　まず、下記のようなネットワークを仮定します。
　Aはポートスキャンを行うマシンで、Bはhoneydと同一のIPを指定したPCとしま
す。

 +--+
 |HP|
 +--+
   |
 +-+-+
 |   |
+-+ +-+
|A| |B|
+-+ +-+

　ここで、Bが停止中の場合、Aによるポートスキャンではまず、BのIPアドレスに
対するARPリクエストが送信されます。HP上のarpdはARPリクエストを受け取ると
自らも同じIPに対するARPリクエストを送信し、一定時間待ちます、当然Bは停止
中ですので何も反応できません。一定時間が過ぎると、HPはそのIPのMACアドレス
はHPのものだとARPレスポンスを返します。これによって、AはHPがBであると思い
こむ、いわゆるARP Spoofingが成功した状態になり、Bに対するアクセスは全てH
Pが受け取れるようになります。
　ここで、Bが起動したとします。この場合、AはまだHPがBであると思いこんでい
ますが、次にBに対するARPリクエストが発生した場合、HP上のarpdは自分が送信
するARPリクエストに対して返答があるため、ARP Spoofingを行いません。
　したがって、AはBの本当のMACアドレスをBからのARPレスポンスで知ることがで
き、以降は正しくBに対して通信を行えるようになります。

　以上で解答は終わりです。
　どうでしたか？　思った通りでしたか？それとも…。

　というわけで、ここから本編に入っていきたいと思います。


■0x03.) 仮想ネットワーク機能

　honeydには仮想的なネットワークを生成し、仮想ネットワーク上に仮想的なPC
を設置することができるエミュレーション機能を備えています。ここではこのエ
ミュレーション機能のうち仮想ネットワーク機能の設定について述べていきます。

　honeydの仮想的なネットワークの設定の流れとしては次のような形になります。

1：新しいルータのIPアドレスの割り当てと仮想的なPCの設置（route）
2：ルータのルーティングテーブルの追加（route link）
3：一般的な仮想的なPCの属性のテンプレートの作成（create）
4：テンプレートの基本的な設定（set）
5：テンプレートの拡張的な設定（add）
6：個々の仮想的なPCの属性の設定（bind、set）

　今回、主に説明を行うのは1と2の部分になります。

　では早速、実際の設定ファイルを作成しファイルのコメントとして順に説明を
行いたいと思います。

-----
vi /usr/local/share/honeyd/config

# 新しい仮想的なルータを作成し、仮想的なIPアドレスとして
# 192.168.1.2を割り当てます。
# また、そのルータが直接通信できる範囲として192.168.1.2/32の
# ネットワークを設定します。
# イメージとしては既にあるネットワークにルータを設置する感じです。
route entry 192.168.1.2 network 192.168.1.2/32

# ルータ192.168.1.2のルーティングテーブルに直接通信可能な
# ネットワークとして192.168.1.2/32のネットワークを追加します。
route 192.168.1.2 link 192.168.1.2/32

# ルータ192.168.1.2のルーティングテーブルに直接通信可能な
# ネットワークとして192.168.2.0/25のネットワークを追加します。
route 192.168.1.2 link 192.168.2.0/25

# ルータ192.168.1.2の仮想ネットワークに新たな仮想ルータを追加し、
# IPアドレスとして192.168.2.2を割り当てます。
# また、そのルータが直接通信できる範囲として192.168.2.128/25の
# ネットワークを設定し、デフォルトの設定の仮想的なPCを設置します。
# イメージとしては仮想ネットワークの中にルータと新たなネット
# ワークを設置する感じです。
# また、オプションを付けることでネットワークの特性の設定も可能
# です。
route 192.168.1.2 add net 192.168.2.128/25 192.168.2.2


# ルータ192.168.2.2のルーティングテーブルに直接通信可能な
# ネットワークとして192.168.2.128/25のネットワークを追加します。
route 192.168.2.2 link 192.168.2.128/25

# default のテンプレートを作成しています。
create default

# default のテンプレートに対してデフォルトの動作として、
# tcp、udpについては全てパケットをブロックし、icmpについては
# 全て受け付けるように設定しています。
set default default tcp action block
set default default udp action block
set default default icmp action open

# create では router のテンプレートを作成しています。
create router

# 上段では router のテンプレートに対して personality として
# "Cisco 1601R router running IOS 12.1(5)"を割り当てています。
# ここで personality とは、そのテンプレートが関連づけられたIP
# がどの様なOS、OSのバージョン、ハードウェアで動作しているのか
# について設定するものです。
# 下段では router のテンプレートに対してデフォルトの動作として、
# tcpについては全てパケットをリセットするように設定しています。
set router personality "Cisco 1601R router running IOS 12.1(5)"
set router default tcp action reset

# create では template のテンプレートを作成しています。
create template

# 上段では template のテンプレートに対して personality として
# "Microsoft Windows XP Professional SP1"を割り当てています。
# 下段では template のテンプレートに対してデフォルトの動作として、
# tcpについては全てパケットをリセットするように設定しています。
set template personality "Microsoft Windows XP Professional SP1"
set template default tcp action reset

# 作成したルータのIPアドレスに対してrouter テンプレートを適用して
# います。
# このbindについては作成したルーターに関してはきちんと設定しな
# いと思わぬところで、セグメンテーション違反が発生するため必ず
# 設定を行ってください。
bind 192.168.1.2 router
bind 192.168.2.2 router

# templateのテンプレートを適用した仮想的なPCをローカルのLAN上
# に配置しています。
# なお、この仮想的なPCにアクセスするにはarpdの助けが必要です。
# したがって、今回はコメントアウトしておきます。
# bind 192.168.1.3 template

# templateのテンプレートを適用した仮想的なPCを仮想的なLAN上
# に配置しています。
bind 192.168.2.3 template

# templateのテンプレートを適用した仮想的なPCを仮想的なLAN上
# に配置しています。
bind 192.168.2.201 template
bind 192.168.2.202 template
-----

　さて、それではこの設定ファイルを早速動かしてみましょう。
　起動のためのコマンドは、対象となるIPの範囲が増え、設定ファイルの名前が
変わったため次のようになります。

-----
honeyd -d -f config -i eth0 -u 1000 -g 32767 192.168.1.1-192.168.2.255
-----

　次にLAN上の他のマシンからpingを使って、作成した仮想ルータと仮想PCにきち
んとアクセスできるか確認してみましょう。

-----
ping 192.168.1.2 -c 1
PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.
64 バイト応答 送信元 192.168.1.2: icmp_seq=0 ttl=64 時間=0.548ミリ秒

--- 192.168.1.2 ping 統計 ---
送信パケット数 1, 受信パケット数 1, パケット損失 0%, 時間 0ミリ秒
rtt 最小/平均/最大/mdev = 0.548/0.548/0.548/0.000ミリ秒, pipe 2

ping 192.168.2.2 -c 1
PING 192.168.2.2 (192.168.2.2) 56(84) bytes of data.

--- 192.168.2.2 ping 統計 ---
送信パケット数 1, 受信パケット数 0, パケット損失 100%, 時間 0ミリ秒

ping 192.168.2.3 -c 1
PING 192.168.2.3 (192.168.2.3) 56(84) bytes of data.

--- 192.168.2.3 ping 統計 ---
送信パケット数 1, 受信パケット数 0, パケット損失 100%, 時間 0ミリ秒

ping 192.168.2.201 -c 1
PING 192.168.2.201 (192.168.2.201) 56(84) bytes of data.

--- 192.168.2.201 ping 統計 ---
送信パケット数 1, 受信パケット数 0, パケット損失 100%, 時間 0ミリ秒

ping 192.168.2.202 -c 1
PING 192.168.2.202 (192.168.2.202) 56(84) bytes of data.

--- 192.168.2.202 ping 統計 ---
送信パケット数 1, 受信パケット数 0, パケット損失 100%, 時間 0ミリ秒
-----

　おかしいですね、192.168.2.Xにはアクセスできないようです。さて、なぜでし
ょうか？
　これは、pingを送信するマシンが192.168.2.0/25と、192.168.2.128/25のネッ
トワークがどこにあるか知らないためです。つまり、ルーティングの情報が存在
しないためネットワークの場所が解らないということです。
　というわけで、routeコマンドを使って、経路情報を追加します。

-----
route add -net 192.168.2.0/24 gw 192.168.1.2 dev eth1
-----

　これで、再度pingを実行すると問題なく反応が返ってきますので、これによっ
て仮想的なネットワークが構築されていることが解るかと思います。


■0x03.) おわりに

　今回はhoneydのネットワーク周りの基本的な機能について説明しました。
　次回は、ネットワーク周りの拡張的な機能に関して説明したいと思います。


