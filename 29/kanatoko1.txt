x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: マニアックJavaプログラミング第五回: 〜 ぬるま湯Java 〜 ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　ややあいまいな記憶だが、おそらく2001年ごろ、筆者はメイン言語をJavaへと
切り替えた。それまでは3年ほどC++（Borland C++ Builder　以下BCB）を使って
いた。気が付いてみれば2006年ももう後半であり、5年近くの間殆どJavaだけで過
ごしてきたことになる。この5年間仕事でも趣味でもコードを書き続けてきたが、
そのほとんどすべての成果物がJava製である。
　最近になって（筆者の本業である）ウェブアプリ周辺では、Rubyが注目されて
いる。耳にしている人も多いかと思うが、Ruby on Railsというフレームワークが
起爆剤となり、世界中で爆発的にRubyの使用人口が増えているようだ。また、Py
thonやPHPなどもこの5年でずいぶんメジャーになってきたようで、活気がどこか
らともなく伝わってくる。

　プログラマには、どのプログラミング言語を使うのかという問題が常につきま
とう。かつてサラリーマン時代にCOBOLで仕事をしたことがあるが、その後Perlを
覚えたときに「これは生産性が20倍は違うぞ」と驚愕したものだ（といっても実
際にはCOBOLとPerlでは守備範囲が違うので、単純に比べるべきではないのだが）。
どのプログラミング言語を選択するかでその後の効率は大きく変わってくる。

　かつては「どの言語がいいのか？」という話題を見るたびに「より多くの言語
を自分で使える状態にしておき、何か作るべきものを前にしたときに最適の言語
を選ぶ姿こそが正しい」と思っていたのだが、いつのまにか「これもJava、あれ
もJava、それもJava」になってしまっていた。Javaのぬるま湯に頭までつかって
いるのだ。最近になってだんだん他の言語も覚えてみたいなという欲求が出てき
たのだが、その前になぜこんなにもJavaだけで過ごすようになってしまったのか、
少し考えてみることにした。


■0x02.) C++との出会い

　1998年頃はとにかくWindows上でネイティブで動作するアプリケーションを作り
たかったので、BCBを選択した。というか実は最初にVisual C++を買ったのだが、
意味がわからずアプリケーションを作れなかったのである。いわゆる挫折である。
プログラミングのプの字もわからなかった頃だったので、いきなりVisual C++は
難しかった（…今さわっても理解できないような気もするが）。
　BCBはやさしかった。難易度だけでなく、プログラマに対してやさしい開発環境
だった。何もしなくても矢印のボタンをクリックするだけでウィンドウプログラ
ムが起動するのだ。Visual C++で挫折した後だったのでこのやさしさは筆者の心
をわしづかみにし、アンチマイクロソフトの旗印を鮮明にすることとなった。

　その後まったく意味を理解しないまま（いわゆるコピペプログラミングで）何
故かアプリケーションを作り続けることができ、おそらく数万行ほどは「意味は
わからないが目的の動作をしている」ソースコードを書き続けた。今考えると、
この段階ではBCBが用意してくれるVCLというクラスライブラリをただ使っている
状態だった。

　転機が訪れたのは書店で「C++ FAQ」という本を購入したときだ。この時点では
もうかなりのボリュームのソースコードを書いた経験があり、またVCLについては
かなり使いこなせていた（と思っていた）ので、「オレはC++は結構できるぜ」と
すさまじい勘違いをしていたのである。しかしこの本を読んでも一体何が書いて
あるのかさっぱり理解できなかった。答えではなく、質問の意味もわからなかっ
たのである。「デストラクタって何だ？」というようなレベルであった。つまり
その時点ではC++という言語は殆ど何も理解できておらず、ただ使いやすく設計さ
れていたVCLを使ってちょこちょこ作業ができる程度のレベルだったのだ。

　「C++ FAQ」を読み進めるうちに自分が作ったプログラムが（主にメモリリーク
系の）欠陥だらけ、問題だらけであることがわかってしまい、「今まで作ってい
たのは何だったんだ」という強い脱力感にさいなまされた。しかし何とか頑張っ
てその時点ではじめて「言語としての」C++を勉強しはじめ、他の書籍も片っ端か
ら読み漁り、徐々にまともなC++プログラマへと進歩していった。

　余談だが筆者はこのようにいきなりBCBからプログラミングを覚えたので、C言
語の経験は殆どない。malloc関数を使ったことがない、と言えばどの程度のレベ
ルか分かってもらえるだろう。


■0x03.) Javaとの出会い

　C++は間違いなく「最強の」そして「最狂の」プログラミング言語である。オブ
ジェクト指向的に使うことで規模の大きいアプリケーションも作れるのに、イン
ラインアセンブラでCPUレベルでのプログラミングも可能であり、またテンプレー
トを使いこなせば想像を絶する高度なプログラミングが可能となる（ちなみに筆
者はテンプレートについてはSTLを使う程度のレベルまでしか理解できなかった）。
そして実行速度も速く、多くのプラットフォームでサポートされている。
　しかし欠点も多い。まず何と言っても「落とし穴」が多すぎる。普通にのんき
にプログラミングしていると、かならず足をずっぽり取られてしまうのだ。C++で
罠を避けるためには常に頭の中で「この場合はアレに気をつけないといけない…」
「こういうケースではコレはタブーで…」と最大限の注意を払わねばならないの
だ。これは非常に疲れる。
　また、クロスプラットフォームのコードを書くのことが実質不可能である。こ
れは同時にインターネット上で参考になりそうな、あるいは利用できそうなソー
スコードを見つけても、手元の環境ではコンパイルできず動かない、というケー
スが多いことも意味する。BCB時代にはさんざんこれで泣かされた。高いスキルが
あれば移植できることもあるのだろうが、当時の筆者には難しい話であった。
　さらにセキュリティの問題がある。バッファオーバーフローやフォーマットス
トリングバグなど、コンピュータを乗っ取ることのできる致命的なセキュリティ
ホールを作る可能性が高い。

　そんなC++との激しい戦いで消耗しつつあった筆者の前に、Javaが姿を現した。


■0x04.) 言語と開発環境

　このころ（そして今もだが）、筆者にとってはプログラミングはそれ自体が目
的ではなく、ソフトウェアを完成させることが目的となっていた。そのため言語
仕様だけでなく、どのようなクラスライブラリが使用できるのかという点が非常
に重要になっていた。
　Javaに手を出して最初の印象は「クラスライブラリが信じられないほど充実し
ている」というものだ。VCLも悪くないライブラリだったのだが、筆者が特に作り
たかったネットワーク関係（ソケット関係）のライブラリはイマイチだった（そ
のためかなり苦労して自作した）。
　しかしJavaは違った。最初から完璧な形でソケット関連のライブラリが用意さ
れていたのである。これには感動した。そしてこのクラスライブラリが「標準」
であり、多くのプラットフォームで同じコードが稼働することに驚いた。

　言語としてのJavaも筆者を魅了した。C++にあったようなたくさんの落とし穴は
殆ど見あたらず、気軽なプログラミングが可能となっていた。C++で感じていた
「う〜ん、これはちょっと問題なんじゃないのか」という点がことごとく解決さ
れていたのである。「C++の反省をふまえて開発された」という点が筆者のニーズ
とぴたりと一致した。

　しかし開発環境はいまいちだった。BCBでプログラミングを覚えた筆者にとって、
統合開発環境（IDE）はあって当たり前のものだ。Javaを勉強する際はjavacなど
を使うコマンドラインでのプログラミングからはじめたものの、javacの起動はあ
まりにも重く、「Javaは重い」というイメージを増幅することとなった。
　同じくBorlandから出ていたBorland JBuilderを使ってみたものの、Swingで作
られたIDEはあまりにも重く、またネイティブGUIとのルック&フィールの違いは違
和感が大きすぎた。

　そこで出会ったのがEclipseである。


■0x05.) Eclipse

　Eclipseで最初に驚いたのはコンパイルがあっという間に終わることだ。BCBで
はコンパイルというのは数分、時には10分かかるものだったのだが、Eclipseでは
エディタ上で変更点を保存するとほぼその瞬間に終わるのである。「Javaは重い」
という常識が覆された。
　また、ネイティブGUIで動作するので使っていて気持ちがいい。エディタにviを
使えないという点は残念なのだが、それを補ってあまりある魅力に溢れている。
Eclipseを使い始めたことで、「言語と開発環境は一体だ」と再認識した。

　筆者が考えるJavaの魅力は、Eclipseあってのものだ。エディタで編集中にリア
ルタイムでコンパイルが走り、エラーとなる箇所に赤線が入る。保存を行えばほ
ぼその瞬間にコンパイルは完了しているので、すぐに実行し動作を確認すること
ができる。つまりコンパイル型言語とインタプリタ型言語のおいしいところを両
取りしているのだ。

　いわゆる「コンパイル型言語」では変更するたびにコンパイルする時間が必要
となるので、その間にプログラマの思考が中断されてしまうと言われる。そのた
め「インタプリタ型言語」は保存して即実行できるから思考が中断されず、多く
のプログラマに支持されているのだ。しかし「インタプリタ型言語」は実行する
まで文法エラーがあるかどうかわからないという欠点を持つ。特に筆者のように
センスがないプログラマは何度実行してもエラー、エラー、エラーとなってしま
い、そのたびに「何行目でエラーだ？」とエラーメッセージを読み解いてエディ
タに戻って…という作業を繰り返すはめになる。

　しかしEclipseならば編集中に文法エラーを発見でき、思考を中断されずに即実
行できる。これはあまり大きな声で語られていないが、Java+Eclipseという組み
合わせを決定的に魅力的なものにしている最大の要因ではないだろうか。

　他にも関数の名前を変更したいときなどに使えるリファクタリングの機能やク
ラス間の継承関係を把握できる機能など、今や筆者にとっては「必須」となって
しまった機能がEclipseには満載されている。筆者にとって「Java」とは同時に
「Eclipseでの開発」を意味するものとなっている。


■0x06.) 言語仕様

　しかしJavaの言語仕様はとても「おかたい」もので、自由度は低い。たまにJa
vaScriptなどを触るとそのあまりの柔軟さに関心させられる。例えば実行時に関
数の中身を書き換えてしまう機能などは非常に魅力的でありJavaでこれが使えた
らな、と強く思う機能のひとつだ（Javassistを使えば似たようなことはできるが、
それでも自由度は低い）。
　しかし筆者は「生粋のプログラマ」ではなくどちらかというと「雑草ソフトウ
ェア開発者」という感じなので、プログラミング言語の言語仕様に対するニーズ
はそれほど高くない。Rubyなどを使っているプログラマのメーリングリストなど
でのやりとりを見ていると、そのことを強く感じる。おそらく生粋のプログラマ
にはJavaはとても窮屈な面があるだろう。


■0x07.) GUI

　しばらくCUIのプログラミングとウェブアプリケーションの開発ばかりやってい
たのだが、やはりGUIのソフトウェアも作りたい。しかし現状、JavaでのGUI開発
はまだまだ問題がある状態である。BCBで可能だった「マウスでボタンなどの部品
を選び、ぺたぺた貼り付けてGUIを作る」というプログラミングはまだ実現できて
いないのだ。
　Javaが標準でサポートしているSwingのようなGUIは、筆者にとっては受け入れ
られないものだ。あの違和感と動作のもったり感は、とうてい使いたくなるもの
ではない。苦労して作ったアプリケーションがあのような使い心地では、満足で
きないのである。

　そこで最近はSWTというライブラリを使っている。これはEclipseも使っている、
JavaでネイティブなGUIを使うアプリケーションを作成できるものだ。これはなか
なか悪くない。ただ現状では開発環境が追いついていないため、どうしてもソー
スコード内でボタンのサイズなどの数値を直接入力するスタイルを取らざるをえ
ず、開発効率はとても悪い。Eclipseにプラグインがあるのだが、バグが多く使い
物にならない状態だ。


■0x09.) その他いろいろ

　そして筆者はウェブアプリケーション開発で食っている人間なので、やはりサ
ーブレットエンジンのような効率的に開発されたサーバーサイドの仕組みは魅力
的だ。C++などでももちろんウェブアプリケーションを作ることはできるのだが、
かなり効率が悪いと言わざるを得ないだろう。また、RDBMSと連携する箇所も多い
ので、JDBCのように多くのRDBMSをサポートするライブラリが使えるのもありがた
い。これらの要素は言語が広く使われてはじめて実現される側面もあるため、「
シェアが広い」という点が言語自体の魅力になるという考え方もできるだろう。


■0x08.) まとめ

　つまり、筆者がプログラミング言語と開発環境に求めるのは次のような点であ
る。

・クラスライブラリが充実しており、また高いクオリティを持つ
・ネットワークプログラミングが可能である（できればSSLもネイティブでサポー
トする）
・エディタの保存と同時にコンパイルが（高速で）終わり、エラー箇所がすぐわ
かる
・関数名の変更などのリファクタリングの機能がある
・オブジェクト指向をサポートしている
・ネイティブGUIのアプリケーションを開発可能である
・クロスプラットフォームである（WindowsとLinuxがサポートされていればとり
あえず満足）
・バッファオーバーフローなどを起こすことができない
・関数の中身を実行時に書き換えることができる
・ウェブ用の効率的なエンジンが存在する
・RDBMSとの相性がいい

　このように情報を整理してみると、やはりJavaが頭ひとつ抜き出て魅力的であ
ることがわかる。しかしあまりにもぬるま湯で刺激がないことも確かだ。そこで、
RubyやLispなどの勉強もしてみようかと思っている（Lispの勉強は少しだが開始
した）。RubyについてはEclipse並に充実したIDEが登場することを期待している。
　5年後には一体何を使っているだろうか。



