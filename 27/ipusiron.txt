x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: 基礎暗号学講座 〜 第2回 〜 ---

著者：IPUSIRON

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　今回は前回の暗号講座の続きになります。今回からはちょっと数式が多くなっ
てきますが、じっくり理解すれば怖くありませんので、安心してください。
　それでは、早速解説に入ります。

■0x02.) 置換と関数

　関数とは、ある変数に依存して決まる値あるいはその対応を表す式のことです。
簡単にいうと、何か数値を代入すると、その数値に対応した何らかの数値が出力
される数式のことです。
　例えば、y=x+1という関数があった場合、xに3を代入（入力）すれば、yは4にな
ります（出力）。このように入力と出力の関係を示す式のことを関数というわけ
です。この辺りの話はプログラミングをやってる人なら既知だと思います。数学
をやっている人なら、写像といったほうがわかりやすいでしょうか。

　置換とは、あるものを別のものに置き換えることである。
　例えば、(1,2,3)という3つの数値の並びがあったとする。このとき3つの数値を
入れ替えて何種類のパターンが存在するでしょうか。ここでは手動でやってみま
しょう。並びの順番は左からカウントするという決まりにします。まず、(1,2,3)
の1番目と2番目を入れ替えると、(2,1,3)となります。他には1番目と3番目を入れ
替えた(3,2,1)、2番目と3番目を入れ替えた(1,3,2)になります。このように2つの
数値を入れ替えるパターンはこの3種類だけです。
　それでは3つの数値を全部動かす操作を考えます。(1,2,3)という並びを右にス
ライドさせてみます。すると(□,1,2,3)となります。3つの並びでなければならな
いので、飛び出した一番右側を1番目の持ってきます。(3,1,2)になります。プロ
グラミングで登場するシフトと同じような操作をすることになります。それでは、
(3,1,2)をもう一度右にシフトさせます。(2,3,1)になります。さらに、もう一度
右にシフトすると(1,2,3)に戻ってしまうことがわかります。
　これですべてが登場しました。1,2,3という3つの数の並びのパターンは、次の
6パターンだけということになります。

(1,2,3)
(2,1,3)、(1,3,2)、(3,2,1)
(3,1,2)、(2,3,1)

　もっと簡単に調べる方法もあります。（□,□,□）を考えます。最初の□に1,
2,3の3つのどれかが入ることができます。仮に1を入れたとします。(1,□,□)と
なります。すると、2番目の□には1以外の2または3が入ることができます。つま
り、2通り。ここで2を入れたとします。(1,2,□)の最後の□には残っている3しか
入ることができません。重複は考えないのでそうならざるえません。ということ
は、総数のパターンは3×2×1＝6通りということになります。
　一般的に(□,□,…,□)（□の数はn個）なら、すべてのパターンはn×(n-1)×
…×2×1通りとなります。数学の世界ではこれを簡単にn!と表記し、「!」マーク
を階乗といいます。例えば、3!（「3階乗」という）なら、3×2×1となります。
また、5!=5×4×3×2×1となります。以降、この記号はよく使うので、しっかり
慣れておいてください。

　階乗を使えば簡単に計算することができるのに、わざわざ手動の方法を取り上
げたのは自分で考える作業によってそこに存在する法則を発見してもらいたいか
らです。こういった経験をたくさんやらないと、新しい問題にぶつかったときに
それを解くアプローチさえも思いつかなくなってしまいます。どんな簡単な問題
であっても、皆さんには考える癖を付けてもらいたいです。解法をたくさん考え
るというのも訓練としては大事です。
　ちょっと話が脱線しました。手動で調べた操作を考えると置換がどのような操
作かということが実感されたと思います。

　それでは関数と置換を比べてみます。関数の場合はy=x^2のグラフを書くとわか
るように、横のx軸にある値は、y軸上のx^2の値に対応します。このグラフの場合
は実数でものを考えていますが、ここでは数値の列だけの世界でとりあえず考え
てみてください。そうすると、関数の場合は重複が可能で、置換の場合は重複が
不可能な変換と考えることができます。
　例えば、(1,2,3)をある関数で操作すると(1,1,1)や(1,2,2)というのもありとし
て考えるわけです。では、この(1,2,3)を関数操作したときに考えられるパターン
の総数はいくつあるでしょうか？　皆さんは手動で調べてみてください。答えを
いうと27通りあります。計算方法としては、置換同様に(□,□,□)で考えます。
1番目の□には1,2,3の3通り入れることができます。また、2番目の□に入るパタ
ーン数を考えますが、置換の場合は1番目で入れた数値と違う数値しか入れないの
で3-1＝2通りでしたが、関数の場合は重複がありなので1番目に入れた数など考え
ることなく2番目の□には1,2,3の3通りが入ることができます。同様に3番目の□
も3通りあります。よって、3通り×3通り×3通りで合計27通りあるわけです。

　つまり、関数と置換を比較すると、関数のほうが総数が多いことがわかります。
これは関数が置換を内包しているからです。実際に置換した結果の並びが関数の
結果の並びにすべて登場していることを確認してみればわかると思います。


■0x03.) ランダム置換と疑似ランダム置換

[定義]すべてのnビット列の集合を{0,1}^nと表し、集合{0,1}^nの要素を並び替え
る置換πの集合をP_n={{0,1}^n上のすべての置換}と書くことにする。このような
置換の集合P_nを長さnのランダム置換族と呼ぶ。

　族というのは集合の集合と考えてもらっても問題ありません。
　例えば、nビット列（n桁あるという意味）は2^n通りあります。(0,0,…,0,0),
…,(0,1,…,0,1),…,(1,1,…,1,1)の総数が2^n通りあるということです。{0,1}^n
という集合から{0,1}^nという集合への置換πの総数を考えます。これは2^n通り
から2^n通りへの置換なので、(2^n)!通りあります。
　次の図をじっくり見て、理解しておいてください。特に置換の総数が(2^n)!通
りあるというところが最初はピンと来ないかもしれません。0x02で置換の総数は
△!通りになるという話をしました。△は(□,□,…,□)における□の数です。つ
まり、△＝#□となります（#は個数という記号。今後もよく使う）。ここでは2^n
桁の数値列を考えていたので、□の個数は2^n、即ち#□＝2^nということです。と
いうことは、△＝#□＝2^nとなり、置換の総数の△!に代入すれば、(2^n)!になる
わけです。
　それでもわからなければ、紙に何度も図を描いて考察してみてください。PCの
画面を見ただけで理解できる人はあまりいないと思います。私も実際そうです。
PDFファイルの論文などがあっても、かならず印刷しないと理解だけではなく、読
む気にさえなりません。特に、数学を学ぶうえでは、自分の手を動かして練習問
題をたくさん解くという訓練が重要です。そうすることでその世界に慣れて、自
然と脳で考えることができるようになるのです。数学は写経と呼ばれ、多くの数
学者が写経を通じて数学を理解してきたということを忘れてはなりません。

（図）http://akademeia.info/main/image8/giji1.jpg

[定義]ブロック長nのブロック暗号において、鍵kをひとつ決めたとき、暗号化ア
ルゴリズムE_Kは平文空間{0,1}^nから暗号文空間{0,1}^nへの置換であり、復号ア
ルゴリズムD_Kはその逆置換である。

（図）http://akademeia.info/main/image8/block1.jpg

[定義]ENC_c:={E_K|K∈{0,1}^κ}と提議する。このENC_nは、長さnのランダム置
換族P_nの部分集合になる。つまり、「ENC_n⊂P_n」である。

[考察1]κ=κ(n)〜n
κ(n)は設計の意味で、nに関係するという意味。
[考察2]#ENC_n=2^κ＜＜#P_n=(2^n)!

　それでは次のような選択平文攻撃を考えます。
　敵（無限の能力は持たない）はENC_nまたはP_nからランダムに選ばれた置換π
に平文m_iを送り、c_i=π(m_i)を受け取ることができます。

（図）http://akademeia.info/main/image8/sentaku1.jpg

　このような敵が現実的な時間において、ENC_nとP_nを識別することが困難であ
るとき、ENC_nを長さnの疑似ランダム置換族といいます。
　もう少しわかりやすく解説してみます。仮に、πがランダム置換から持ってき
たものであれば、そのπで暗号化されたものはランダム値です。一方、ENC_nから
π'を持ってきたとします。これは上記の定義を満たすP_nの部分集合です。この
π'を使ったとしても、敵にとって平文に対応する暗号文だけを見たとき、そのπ'
がP_nから持ってきたのかENC_nから持ってきたのかわからななければ、即ちそれ
がランダム値に見えてしまえば、πは疑似ランダム置換で、ENC_nは疑似ランダム
置換族ということです。

[定義]疑似ランダム置換の厳密な定義

（図）http://akademeia.info/main/image8/giji3.jpg

[定理]理想的なブロック暗号とは、ENC_nが長さnの疑似ランダム置換族となるよ
うな暗号となる。


■0x04.) ランダム関数と疑似ランダム関数

　置換のときと同様にしてランダム置換族と疑似ランダム置換族を定義できます。

[定義]集合{0,1}^nから集合{0,1}^nへのすべての関数の集合を、R_n={{0,1}^n上
のすべての関数}と書き、長さnのランダム関数族と呼ぶ。

（図）http://akademeia.info/main/image8/giji2.jpg

[定義]F_nをR_nの部分集合とする。選択平文攻撃を行う敵が、F_nとR_nを識別す
ることが困難なとき、F_nを長さnの疑似ランダム関数族と呼ぶ。


■0x05.) 直観的な意味と乱数について

　0x03と0x04ではちょっと数式がたくさん登場して、わからない人も多いのでは
ないでしょうか。私自身最初は意味不明でした。とりあえずこの世界に慣れるま
では直観的に考えても暗号の世界に触れることはできます。
　直観的に考えると、ランダム関数とは与えられた入力に対して、その出力が決
定されるものの、その出力はどんな情報からも推測できないランダムな値である
ような関数のことです。もっと直感的にいうと、ランダム関数から出力された値
は完全なランダム値（よく口語では乱数、ランダムバリューとかいわれる）にな
っていて、何を入力したかは推測できないということです。
　このような関数が現実に存在するかどうかは別として、そのような関数の振る
舞いをブロック暗号の性質に見立ててて、利用モードの安全性を議論します。簡
単にランダムと言葉に出していますが、ランダム値を実現することは実際には非
常に困難です。
　その困難性を見ていく前に、まず簡単にランダム値とはどのようなものを知っ
ておかなければなりません。乱数には次の3つの性質を考えることができ、それを
何個満たすかどうかで乱数のランクが異なります。

---------------------------------------------------------------------------
無作為性     | 統計的な偏りがなく、でたらめな数列になっているという性質。
-------------+-------------------------------------------------------------
予測不可能性 | 過去の数列から次の数を予測できないという性質。
-------------+-------------------------------------------------------------
再現不可能性 | 同じ数列を再現できないという性質。
             | 再現するためには、数列そのものを保存しておくしかない。
---------------------------------------------------------------------------

　例えば、無作為性の性質を持っていたとしても、再現不可能性を必ず持ってい
るとは限りません。このように下の性質にいくほど厳しい制限、即ち完全なラン
ダムに近くなります。
　この3つの性質を満たすものが完全なランダム値（真のランダム値）です。しか
し、このような真のランダム値は、コンピュータのソフトウェアでは作り出すこ
とは不可能です。もしそうしたランダム値を作るとしたらハードウェアの助けが
必要となります。しかも、かなり複雑でよいアイデアでなければ、偏りが出てし
まうので、現実的には真のランダム値は使われません。そこで、普通の暗号では、
無作為性と予測不可能性の2つの性質のみを持つランダム値を使われます。これは
真のランダムではないので、疑似ランダムと呼ばれます。そうした疑似ランダム
を生成する関数のことを疑似ランダム関数と呼びます。
　ブロック暗号には鍵入力があったことは前回のWBの記事で触れました。この鍵
が求まってしまえば、どの入力がどの出力を出すかわかってしまうわけです。そ
こで、ある程度の時間をかけたうえで破れるかもしれないわけです。


■0x06.) 課題

　いずれの問題も今回の記事をしっかり理解すれば解けると思います。紙に図を
書きなぐって、きちんと置換と関数の違いについてわかっていれば、難しくない
と思います。

●問1：選択平文攻撃について簡単に解説せよ。

●問2：{0,1}^5、即ち5ビット列について考える。
（1）ビット列のパターンの総数は？
（2）{0,1}^5から{0,1}^5への置換の総数は？
（3）{0,1}^5から{0,1}^5への関数の総数は？

●問3：P_n、R_n、ENC_nの3つの集合について、ベン図で記述せよ。


■0x07.) おわりに

　本当は今回の記事でブロック暗号の利用モードまで進むつもりでしたが、思っ
たより疑似ランダム置換の解説に手間取ってしまったので、利用モードに関して
は次回で解説したいと思います。利用モードの仕様自体は今回解説したことを知
らなくても理解できますが、暗号を数学的に捉えるには今回の定義や概念は非常
に重要なので、来月までにこの世界に慣れておいてください。


