x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第○章: 「リバースエンジニアリングまつり」レポート ---

著者：eagle0wl

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　セキュリティに関連する技術としては、いまひとつ知名度の低い「リバースエ
ンジニアリング」。国内でこの技術を主題にしたワークショップが開催されると
聞きつけ、筆者も参加してきました。詳細は以下のリンクから。

・カーネギーメロン大学セキュリティ・ワークショップ
「情報セキュリティのためのリバースエンジニアリング」
http://www.cmuj.jp/070409workshop/index.html

　このワークショップは、カーネギーメロン大学日本校の武田圭史教授の音頭に
より話が持ち上がり、去る4月9日に開催されました。リバースエンジニアリング
というトピックでこのような催しが行われること自体、非常に画期的な試みで、
このような場を設けて下さった武田教授に本当に感謝いたします。

　今回のワークショップですが、事前受付開始と共に応募が殺到して2日足らずで
定員を迎えるという、通常では有り得ない盛り上がりを見せていました。事実、
会場でも130名がすし詰め状態で、かなり蒸し暑かったです（笑）。講演も5コマ
というなかなかハードなスケジュールでしたが、最後まで興味深く聞くことがで
きました。

　筆者の周りでは「行きたかったけどすでに締め切られていた」「行ってきてレ
ポートして欲しい」との声も多く聞かれました。事実、ワークショップ中でも「
資料だけでも欲しい、という問い合わせが相次いでいました」との発言があった
ことから、相当関心が高まってきているように感じます。そこで、今回ワークシ
ョップに参加することができた者の責務として（？）、僭越ながらレポートをし
たためる次第です。

　なお、表題にもなっている「リバースエンジニアリングまつり」の由来ですが、
武田教授さんのblogにありますように、企画段階の仮名（？）から来ています。

http://motivate.jp/archives/2007/03/post_119.html


■0x02.) 会場の雰囲気

　今回は4月9日（月）開催でしたが、平日であるのは仕方ないとしても、学生に
とっては参加しづらい日取りだったように思います。筆者は開始30分前に到着し
ましたが、すでに半分近くの席が埋まっていました。最終的に会場は満員。出席
者は130人を超えるほどで、非常に暑苦しかったです（笑）。会場には、Wizard 
Bibleでお馴染みの方など、セキュリティ界隈で見聞きする方を多数お見かけしま
した。セキュリティの世界は狭いと感じた次第であります。と書いておきながら、
筆者はセキュリティ業界の人間では無かった（過去形）ので、そのほとんどの方
とは初対面でした（参加していた金床先生が紹介して下さりました）。こういう
場でコネクションが生まれ出すのはなんとも嬉しいことです。

　先ほど示しましたワークショップ詳細ページに、ワークショップの写真が数点
ありますので、ほんの少しですが会場の雰囲気を味わえるのではないかと思いま
す。激しくどうでもいいですが、筆者の後ろ姿が映っている写真があります（笑）。


■0x03.) 全体の感想

　今回は、リバースエンジニアリングを題材にした初の試みは第一回目というこ
とでイントロダクション的な発表が多かったように思います。したがって、深く
踏み込んだ発表はほとんどなかったように思います。また、準備期間が短かった
のか、発表内容が著しく被っていたりしていました。でも今回は一回目です。今
後の動きに期待大です。


■0x04.) リバースエンジニアリングの現状と課題

　初めは武田教授による「リバースエンジニアリングの現状と課題」と題した、
リバースエンジニアリングのイントロダクション的な内容でした。リバースエン
ジニアリングとは何か、その目的とは、解析手法・解析妨害手法、今後の動向な
どの解説が行われましたが、比較的ゆるい内容だったなという印象です。ただ、
筆者はソフトウェアクラッキングから入った、ある意味イレギュラーな人種なの
で、「不正な目的ではない」（笑）利用事例については改めて考えさせられると
ころがあったのも事実です。

　そもそも、リバースエンジニアリングは何を目的として行うものかを次に記し
ます。

・ウイルス・ワーム・マルウェアなどの解析による対抗策の検討
・バックドア・個人情報の送信など、本来の仕様にはない動作の発見・解析
・ソフトウェアの脆弱性の発見・解析
・（OpenOfficeなど）既存ソフトウェアとの互換性確保のための解析
・競合製品（EPSONが開発したPC-98互換機など）の開発
・DRMといった著作権保護機構の回避
・ゲーム改造
・exploitなどの不正なソフトウェアの開発のための解析

　リバースエンジニアリングに関する具体的な研究事例としては、次が挙げられ
ます。

・プログラムの復元（デコンパイル）
・プロトコルの解析
・P2Pアプリケーションなどの解析（国内はWinny,Share。海外はSkypeなど）
・暗号化コードの解読
・マルウェア解析の自動化
・脆弱性解析の自動化
・プログラムの難読化
・Fuzzing

　Fuzzingとはアタックベクタ（プログラムの入力）に対して、ブルートフォース
的に様々な入力値を生成・投入させ、エラーを故意に引き起こす手法を指します。

　また、国内ではほとんど見られないですが、学術的なカンファレンス・アドホ
ックな研究会は、海外では適時開催されているそうです。情報セキュリティ・ソ
フトウェア工学の一分野として取り上げられることが多いですが、リバースエン
ジニアリング主体のカンファレンスとして、カナダ・モントリオールで開催され
るREcon（http://recon.cx/）などが知られています。ハッカーカンファレンスに
おいては、脆弱性検査を中心とする発表が常時行われていることは、WB読者であ
ればご存じだと思います。


■0x05.) リバースエンジニアリングによる脆弱性監査

　2番目は、お馴染みeEye Digital Securityの鵜飼さんの発表でした。鵜飼さん
のそれは、毎回技術的に高度なものが多いのですが、前半の発表は「eEye Secur
ity Forum / Autumn 2006」のものとほとんど同じでした（汗）。

・セキュリティ・プロフェッショナルのためのリバースエンジニアリング
http://www.scs.co.jp/event/2006/1027_eeye/

　しかし後半は、実際の脆弱性解析事例として、アニメーションカーソルの処理
におけるバッファオーバーフローと、Windows LSASSのリモートバッファオーバー
フローの2件を題材にして、実際に脆弱性を発見するプロセスを紹介していました。

・Windows ANI File Parsing Buffer Overflow
http://research.eeye.com/html/advisories/published/AD20050111.html

・Windows Local Security Authority Service Remote Buffer Overflow
http://research.eeye.com/html/advisories/published/AD20040413C.html

　アニメーションカーソルの脆弱性というと、つい最近Microsoftが対策パッチを
緊急リリースしていましたが、それとは別物です（鵜飼さん曰く、偶然タイムリ
ーな話題になったとのこと）。

・Microsoft、aniファイル脆弱性対策パッチを4日にリリース
http://slashdot.jp/security/article.pl?sid=07/04/02/098253

　しかしながらこの0-dayは、今回紹介する事例に置ける脆弱性と同様のコードが
他所にも存在していたために引き起こされたものとのことです（本当にタイムリ
ーですね）。

　後半の発表は、バイナリエディタのバイナリ表示、WinDBGのデバッグ画面、ID
A Proの逆アセンブルリストのスクリーンショットが連続する、技術寄りでレポー
トしにくい発表なので（笑）、本レポートでは割愛させて頂きます。


■0x06.) マルウェアのリバースエンジニアリング

　続いて”世界のホシザワ”こと星澤裕二さんによる発表です。本人曰く、短い
時間しか与えられていないと思っていたようで、プレゼンの内容も割と初歩レベ
ルでボリュームも控えめでした。が、星澤さんが本気出して資料作ったらとんで
もないことになることは確実なので（苦笑）、まあアリなのではないかなと…。

　星澤さんはコンピュータウイルスなどのマルウェアが専門なので、マルウェア
の機能や目的の調査、マルウェアを検出するシグネチャの作成、そしてマルウェ
ア開発者の意図を探るためにリバースエンジニアリングを行っています。ここで
重要なのは、「マルウェアの解析には時間をかけることができない」ということ
です。つまり、解析を行っている間にも感染被害は次々と発生するため、他のリ
バースエンジニアリングとは異なり、とにかく「時間との勝負」解析時間の短縮
が重要課題になります。さらに近年のマルウェアは、いわゆるパッカーや難読化
・アンチデバッグなどといった、自身を解析されにくくするテクニックが用いら
れているため、人手による解析だとどうしても時間がかかってしまいます。その
ため、近年のマルウェア解析においては、その解析・発表までの作業がかなり自
動化されているようです。もちろん自動化にも限界がありますので、手作業によ
る解析も行われますが、検出するためのシグネチャ作成が第一であることを考え
ると、非常に合理的といいますか当然の流れであるように思います。

　補足になりますが、星澤さんが所属するセキュアブレインでは、2007年3月から
”全自動かつ高速にマルウェアの解析と駆除ツールの生成を行う”「SecureBrai
n Zero-Hour Response System」を販売しています。

http://www.securebrain.co.jp/news/070312_zhr.html

　マルウェアのリバースエンジニアリングは「詳細な動作など得なければならな
い情報が多いため、時間と手間がかかる」とのことで、ノウハウが固まっていな
いことからも「経験と慣れが必要」とも。さらに「OSやネットワーク・プログラ
ミング言語などの幅広い知識が必要不可欠」だそうです。筆者も気が向いたとき
にコンピュータウイルスを解析する（フリをする）ことがありますが、マルウェ
アはOSなどの動作に強く関連している性質上、幅広い知識が要求され、しかもコ
ード自体が危険なものであるため、安易にそれを実行するわけにもいかず、さら
に（一般にウイルスはコードサイズが小さいとはいえ）詳細な動作を知るために
はコードを幅広く精査しなければならないため、モノによっては時間と手間がか
かってしまいます（単に私のスキルが低いだけかもしれませんが…）。

　前述しましたが、ほとんどのマルウェアは「パッカー」と呼ばれる実行可能フ
ァイル専用の圧縮・暗号化ツールが用いられているため、リバースエンジニアリ
ングを行うには、逆の処理を行うアンパックという作業が必要になります。星澤
さん曰く「近年のボットはその9割以上がパックされており、国産であれば、いわ
ゆるワンクリックウェアも9割以上がパックされている。また、パッカーは150種
類以上存在するが、実際に使われているパッカーは10％程度」とのことです。こ
こで星澤さんは150種類以上、と仰りましたが、その性質上、同一パッカーのバー
ジョン違いであったとしてもパック手法がバージョン毎に毎回異なる（＝互換性
がない）ため、それらを別カウントとすると、その種類はさらに膨大なものにな
るものではないかと推測できます。

　しかしながら、パッカーの暗号化を解除し、元の実行ファイルを復元すること
のできる「アンパッカー」も有志の手で多数作られているはずです。それに関し
て星澤さんは「アンパッカーも250〜300種類以上があるが、それで得られる実行
ファイルは不完全なものが多い、例えばコマンドボタンが正しく復元されてない
ケースもある」と仰っています。

　さらに、マルウェア特有のトピックとして、ポリモフィック・メタモフィック
技術があります。両者とも、自分自身を組み替えることでアンチウイルスによる
検出を困難にする技術です。両者の違いについては割愛しますが、自分自身を組
み替えるといっても必ずオリジナルのコードはあるはずです。ただ、星澤さん曰
く「アンチウイルス的（検出）にはある程度対抗技術は確立しているが、解析の
手間に関しては負荷が増大する」とのことで、マルウェア対策に関しては、今後
かなり厳しい戦いを強いられるのでは、と思った次第。


■0x07.) ソフトウェア製品開発・提供者から見たリバースエンジニアリング

　すこし視点が変わって、脆弱性発見のためにリバースエンジニアリングされる
立場にあるマイクロソフトの中の人である、セキュリティレスポンスマネージャ
の小野寺さんによる発表でした。小野寺さんは非常にユーモアのある方で、話が
一番面白く会場からの笑いが絶えませんでした。というのも、最初の掴みで次の
ようなやり取りがあったので、堅苦しい雰囲気だった会場が一気に解れました。

小野寺さん「会場の中で、Microsoft Office製品をデバッガに読み込ませたこと
のある方、挙手願います」
（鵜飼さんをはじめとする少数から手が上がる）
小野寺さん「はい、手を挙げて下さった方はマイクロソフトの使用許諾契約に違
反していますね」（会場笑）

　まず前提条件としてマイクロソフト製品は、使用許諾契約書にあるとおり、リ
バースエンジニアリングを許可していません。リバースエンジニアリングの定義
として、「Microsoft エンカルタ」（MSの中の方らしいですね）のリバースエン
ジニアリングの定義を引用しています。

-----
【競合する他社の】新製品や過去の製造プロセスなどを分解・分析し、その性能
・構造などを読みとり、それを新製品などに応用する技術。（【】は筆者）
-----

　ここで、小野寺さんは【競合する他社の】を強調して説明していました。これ
は、リバースエンジニアリングすべてが禁止だという意味ではなく、自社製品に
対するリバースエンジニアリングは（当然だが）認められ、自分（自社）以外が
権利を有するものについてのそれは認められない、という意味で話しを進めてい
るからですね。

　小野寺さん曰く「ソフトウェアには企業秘密がたくさんあるため、リバースエ
ンジニアリングを制限したい。しかし、自社製品に関しては開発・サポートを円
滑に進めるためにリバースエンジニアリングが必要」とのことで、リバースエン
ジニアリングには（法律的に）安全なものとそうでないものがあるとのこと。

　例えば、マルウェアの解析において、小野寺さんは「著作権などは一般のアプ
リケーションと同じ扱いであるが、開発者不詳ということになっているため、リ
バースエンジニアリングしたところで開発者が権利を主張することはないので問
題ないだろう」との見解を提示していました（ここでマイクロソフトの公式見解
ではないことを強調）。

　脆弱性の解析については「グレーゾーン、製品解析とは異なり、脆弱性解析の
ような、本来起こりえないことになっている”不思議な挙動”によるアプリケー
ションの影響を解析するのであれば、問題ないのでは」とコメントしてました（
ここで再度マイクロソフトの公式見解ではないことを強調）。これに関しては様
々な見解があるように思いますが「脆弱性解析」に関して言えば、グレーゾーン
であっても公共の利益に適うので有れば許容されるのでは、との印象を受けまし
た。しかし、本件は（少なくとも国内においては）明文化はされておらず、それ
が開発者・リバースエンジニアの判断を迷わせる一因ではないかと思っています。

　また、リバースエンジニアリングの阻止（アンチデバッグ・アンチクラック）
についても「.NET Framework (CLI) 向けのバイナリなどは難読化しないとほぼ完
全なソースを復元できる」とのこと。.NET 向けのバイナリは非常に高い精度で復
元（デコンパイル）が可能ですが、「Reflactor for .NET」あたりが.NETデコン
パイラとして有名ですね。また、「.NET主要コンポーネントは難読化が施されて
いない」とも。

・Reflactor for .NET
http://www.aisto.com/roeder/dotnet/

　余談ですが、Javaに関してもクラスファイルからのデコンパイルが容易です。
これに関しては『クラッキング・バイブル』を参考にして頂きたいと思います。

　さらにWindows Vistaのみに搭載されている、「Protected Processes」という
機能についても紹介していました。これは、有り体に言えばWindows公認のRootk
itのようなもので、カーネル（OS）レベルでプロセスを保護する機構で、デバッ
ガのアタッチなどが不可能になる技術とのことです。使いようによっては危険な
機能となりうるので、Microsoftの認証が必要とのことでした。


■0x08.) リバースエンジニアリングと情報セキュリティの法的問題

　最後は、弁護士の高橋郁夫さんによるリバースエンジニアリングに関わる法律
に関する発表でした。リバースエンジニアリングに関する法律については、国内
と国外でその動向が大きく異なっています。特に国内に関してはリバースエンジ
ニアリングに関しては明文化されておらず、事例も非常に少ないのが実情のよう
です。

　制定法の動向として、米国合衆国では DMCA（Digital Millenium Copyright A
ct：デジタルミレニアム著作権法）が存在しており、著作権保護システムの無効
化を禁止する規定が存在しますが、一部例外が追加され、暗号研究・セキュリテ
ィテストなどはその例外事項にあたるようです。さらに、アメリカにはUCITA（U
niform Computer Information Transaction Act）という、リバースエンジニアリ
ング禁止条項を正当化する法律も存在しているそうですが、規定も曖昧で、実際
に採用している州は少ないとのことです。

　EUではEU Directive（Europian Communities Council Directive on the Lega
l Protection of Computer Programs）という法律が存在し、その6条に逆コンパ
イルの規定が存在し、9条2項に「逆コンパイルに関する6条に反するいかなる契約
内容も無効」との記載があるとのこと。つまりデコンパイルを法律で認めている
訳ですね。EUは進んでいますね（？）。

　対して日本では、リバースエンジニアリングに関しては、明文化はほとんどさ
れておらず、判例も非常に少ないです。そのため「解釈」というレベルでしかな
いのですが（日本の法制度の限界ですよね…）、ここで専門家の見解を聴くこと
ができることは非常に貴重ではないかと思います。

　高橋さんは「逆アセンブル・逆コンパイルという作業が、プログラムの複製と
みなされ著作権侵害に該当するのか？」という問いかけを行いました。これに関
しては、学説の根拠は明確ではないものの、リバースエンジニアリングを認める
向きが大多数のようです。まず「逆コンパイルで得られたソースコード」の位置
づけとして、2通りの見解が存在するようです。

1) 本来のソースコードと、逆コンパイルで得られるソースコードは機械的には合
致しない→「翻訳」と同様の扱いであり、別個の表現とみなされるため、法律上
問題ない（という解釈）

2) 機械的にソースコードを作出することから、機械的な複製である→複製権侵害
となる。契約上の制限条項違反の際に刑事的制裁も可能となる（という解釈）

　しかし、逆コンパイルが複製権を侵害するとしても、何らかの理由でリバース
エンジニアリングが認められるケースが非常に多いようです。つまり、1)の見解
が正になる、ということでしょうか。その認められる理由として、

・いかなる「複製」に権利が及ぶものと解釈するべきではない
・先人の文化的所産を踏まえて新たなる創作活動を促進することは、法制度の趣
旨に適う
・新たな創作活動の作業過程における複製は許容される

という見解が存在しているとのことで、前述しましたが「グレーゾーンであって
も公共の利益に適うので有れば許容される」のではという解釈が適用されるよう
です。それはそれで望ましいことなのですが、明文化されず解釈で乗り切る運用
は健全ではないと感じた次第です。


■0x09.) パネルディスカッション

　各パネリストによる発表後は、パネルディスカッション形式で参加者を含む討
論が行われました。中でも印象に残ったものをいくつか記していきたいと思いま
す。

※本稿はメモを元に起こしていますが、筆者の（超）解釈も少なからず含まれて
います。その点ご容赦下さい。

　「セキュリティ全体の利益を考慮すると、のんびりとしていられないケースが
ある。作者不詳あるいは継続的なメンテナンスが行われていないWinny,Shareのよ
うなソフトウェアの場合だと、リバースエンジニアリングせざるを得ないのでは
ないか」という発言があり、それに続く形で、Shareのリバースエンジニアリング
禁止条項についてのツッコミもありました。

参考：Share EX2 の readme.txt に記載されている禁止事項
--------------------
禁止事項

  本ソフトウェアの販売。
  インターネット上以外のメディアでの配布。
  リバースエンジニアリング。
  改造改編版の配布。
  意図的なShareネットワークへの攻撃。

禁止事項に違反した場合、著作権者の了承を必要とせずに、任意の個人または団
体が禁止事項についての注意勧告、場合によっては法的措置を行えるものとしま
す。
--------------------

　続いて、「学校でソフトウェアの開発は教えてくれるが、解析・デバッグにつ
いては教えてくれない」「リバースエンジニアリング技術の体系化、トレーニン
グの場をどのようにして用意するべきかが課題だ」「攻撃者側は情報の共有がで
きているが、防御側は情報の共有ができていないのでは？」「リバースエンジニ
アリング技術はオープンではない。アメリカではオープンだが、国内においては
解析技術の蓄積がなされておらず、米国と日本の技術力の差は圧倒的」といった、
（国内における）教育と情報共有の不備に関する発言も目立ちました。特に、星
澤さんはワークショップ全体を通して、解析エンジニアの育成と情報共有の重要
性を何度も強調していたことが印象に残りました。

　リバースエンジニアリングに対する誤解が、周知と普及の足枷になっているの
ではという指摘も。「かつてtcpdumpを使うこと自体けしからんという風潮があっ
たが、今現在リバースエンジニアリングにおいて同じことが起こっているのでは
ないだろうか」とも。しかし、一番気になったのは「日本にもリバースエンジニ
アリング系の資料はあるものの、クラック系が多い」「7〜8年前頃にソフトウェ
アの不正利用が横行していたが、そのイメージを未だに引きずっているのではな
いか？」「昔は攻撃などに使われていたことからアンダーグラウンドなイメージ
が強い」「リバースエンジニアリングのイメージアップが必要ではないか」とい
った意味合いの発言がみられました。これは確かにその通りであり、『クラッカ
ー・プログラム大全』『クラッキング・バイブル』なんというストレートなタイ
トルの書籍執筆に関わった者としては苦笑するしかありませんでした。しかし、
それを鵜飼さんも一緒になって言っているのもどうかと思いましたが…。


■0x0A.) ワークショップ終了後

　パネルディスカッションでは、参加者も発言できるようになっていたのですが、
ワークショップ終了後に個別に話したほうがいいと思い、突撃を敢行しました。
特に星澤さんとは長くお話しすることができましたが（ありがとうございました）、
そのやり取りの中で「脆弱性を公開したら、それを発見した人は評価されてポジ
ションがよくなるけれども、リバースエンジニアリングにはそれがないのが問題
ではないか」といった印象的なコメントをいただくことができました。

　リバースエンジニアリング技術に関する情報は、なかなか表に出てこないもの
です。アンチデバッグ技術やパッカー・難読化技術などは、一言でいえば”手品”
のようなもので、種明かしをすればそれでおしまいです。情報を隠すことが安全
性の向上につながるという構造上、情報はなかなか外に出て行かないものです。
HackにしてもKrackにしても、攻撃手法が編み出されたら、それに対する防御手法
も公開されていたちごっこ、という点では変わりません。しかし、脆弱性情報の
公開は一般に公共の利益に適うことですが、アンチデバッグ技術を公開したとこ
ろで解析者側が損をするだけです。リバースエンジニアリングに関する情報はな
かなか外に出て行かない、というのが現状のようです…（それでも数年前と比べ
るとよくなってはいますが）。

　鵜飼さんともお話しすることができましたが、名刺交換の後『クラッキング・
バイブルの中の人です』といった瞬間、鵜飼さんの微妙な笑顔を見ることができ
た気がしました。非常にレアな経験だと思います（爆死）。


■0x0B.) 最後に

　リバースエンジニアリングというと日の目を見ない、どちらかといえば前向き
ではない技術であるように捉えられる向きがありましたが、ここ最近になって徐
々に盛り上がりを見せています。P2Pソフトウェアやマルウェアのように、リバー
スエンジニアリングする価値のあるソフトウェアが出てきていることも大きいよ
うに思います。

　今回のワークショップは、日本における閉塞的な風潮を打破するいい切っ掛け
にもなったと思います。それは130人の席が2日で埋まったことや、資料だけでも
いいから欲しい、という問い合わせが相次いでいたことからも明らかだと思いま
す。ワークショップの最後で、武田さんが次回も開催したいと仰っていましたの
で、武田さんの所に応援メールを送れば、第二回・第三回のワークショップが開
催されるかも知れませんよ。次回開催時はもちろん筆者も参加するつもりです。



