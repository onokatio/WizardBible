x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x

--- 第7章: Becky! リバースエンジニアリング ---

著者：金床

x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x
x0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0xx0xXx0x


■0x01.) はじめに

　Becky!は多くの国内Windowsユーザーに愛されている、シェアウェアのメールク
ライアントソフトウェアだ。筆者も1998年頃に送金し、以来ずっとバージョン1系
列を使ってきた。ソフトウェアの肥大化とともにソースコードのスパゲッティ化
が進みメンテナンスが不可能な状態になるのはよくあることで、Becky!の作者も
ある時点でスクラッチからコードを組み直すことにしたようだ。そして誕生した
のがBecky!のバージョン2系列である。
　筆者はWindows 95を2003年まで使い続けた実績があるほどソフトウェアのバー
ジョンアップを面倒くさがる性質なので、当然ながらBecky!のバージョン2が出た
ときも無視した。しかし、頑張って使い続けたバージョン1もスパムメールやウイ
ルスメールの受信時にバッファーオーバーフローっぽいクラッシュをすることが
多くなり、そのたびに該当するメールを特定して削除し再び受信処理を行う、と
いう手順があまりにも面倒くさくなり、しかたなくバージョン2系列へのバージョ
ンアップを決行した。
　しばらく使ってみてインターフェースの違いにも慣れ、「おっ、バージョン2も
結構いい感じではないですか」などと油断しはじめたころ、事件は起こった。


■0x02.) 漏れるIPアドレス

　ある日、本当に偶然に、自分が送信したメールのヘッダー部を眺めていると、
なにやらいやな文字列が目に付いた。

-----
Received: from ff194.ade2.point.ne.jp (HELO ?192.168.2.9?) 
-----

　なんだこれは。なんと筆者のマシンのプライベートIPアドレス（192.168.2.9の
部分）がヘッダー部に記録され、丸見えになってしまっているではないか。
　筆者の家のネットワーク環境はごくありふれたもので、ADSLルーターでIPマス
カレードを使っている。つまり内側はプライベートアドレスを使ったネットワー
クになっているが、外側へは特別な設定を行わずにTCP接続が可能な環境だ。この
環境は外側から内側のホストに対して直接パケットを送りつけることができない
ため、TCP接続を利用するワームなどの攻撃を一切寄せ付けず、それだけである程
度のセキュリティを確保できる、優れたものだ。IPマスカレードのユニークな点
はそのTCP接続の透過性にある。ネットワーク内側のクライアントソフトウェアに
は自ホストのプライベートIPアドレスと接続先サーバーのグローバルIPアドレス
によって成り立っているように見えるTCP接続が、接続先サーバー側からはADSLル
ーターの外側のグローバルIPアドレスと接続先サーバー自身のグローバルIPアド
レスによって成り立っているように見える。初めてIPマスカレードに触れたとき
にはその仕組みが理解できず、激しく混乱した。まぁこれは、筆者がアプリケー
ション層の住人だからだが。
　さてBecky!はバージョン2系列へのバージョンアップの際にHELOコマンドの引数
の扱いを変更したらしく、以前はホスト名を使っていたのだが、今度はIPアドレ
スを使うようになったようだ。これはとんでもない改悪である。筆者以外にもこ
れを改悪だと感じた人がいたようで2002年くらいの時点でメーリングリストに投
稿があったようだが、どうも作者には大した事とは受け取られなかったらしく、
そのままの仕様で現在に至るようだ。
　IPマスカレード環境の内側のネットワークアドレスやホストのプライベートア
ドレスが知られたからといってすぐにハッキングされてしまう、などということ
はないのだが、これらの情報は公開すべき性質のものではない。CSRFを使ったイ
ントラネット系アプリケーションへの攻撃（Wizard Bible Vol.18参照）などは
その理由の一例だ。
　これに気付き、いくつかのメーリングリストでBecky!のバージョン2系列を使っ
ているユーザのメールヘッダーをチェックしてみると、筆者同様に職場や自宅と
思われるネットワークのプライベートアドレスが漏れてしまっている人がたくさ
んいる。おそらく大部分は気付いていないのだろう。


■0x03.) リバースエンジニアリングという選択肢

　さて、たったこれだけの理由でバージョン1系列に戻すという気にもならないし、
作者への仕様変更の要望は既に拒否されている。こんなとき、自分の好きなよう
に改造できるオープンソースソフトウェアのありがたみが身にしみる。　だがし
かし、筆者はここ最近ブームであるアセンブリ系・クラック系書籍をいくつか読
んでおり、こんなときにはバイナリ自体をいじって強引に解決できないかという
考えが浮かんできた。筆者が知っている一人のスーパーハカーは以前こう言って
いた。

「アセンブリを極めてれば、Windowsのバイナリだって全部オープンソースだよ」

　なんとも格好のいいセリフではないか。筆者はアセンブリについては極めるど
ころか初心者同然のレベルでしかないが、何事も一歩目を踏み出さないかぎり極
みに到達することもない。そんな思いでバイナリの解析と改造、つまりリバース
エンジニアリングに挑んでみることにした。


■0x04.) 3分で終了

　今回問題になっているのはHELOコマンドである。まずはバイナリエディタでBe
cky!の実行ファイルを開き、とりあえずはHELOという文字列を検索してみた。す
るとHELOを含む以下の3つの文字列が見つかった。

-----
HELO localhost
HELO 
HELO %s
-----

　問題となるHELOコマンドの引数にIPアドレスが使用されてしまう処理では、こ
れらの3つの文字列のうちのどれかが使われているはずだ。ここで3つめが猛烈に
怪しいことに気付く。この「%s」はおそらくC言語系の関数で使用されるフォーマ
ット文字列であり、実行時にIPアドレスを含む文字列に変換されるのではないだ
ろうか。そこで、この「%s」の「%」を「A」に変換し、フォーマット文字列のメ
タキャラクタとしての役割を排除する。変換後の実行ファイルを起動してメール
を送信し、ヘッダー部を確認してみる。すると…

-----
220 mtools.mixedmedia.net ESMTP
HELO As
250 mtools.mixedmedia.net
…（略）…
-----

　見事に目的が達成された。HELOコマンドの引数にはIPアドレスは現れず、代わ
りに「%」が「A」に変換された「As」という意味不明の文字列が使われるように
なった。「リバースエンジニアリングだ」などと構えて挑戦してみたものの、作
業としてはたった1バイト書き換えただけ。時間にしても3分もかかっていないの
ではないだろうか。


■0x05.) もう一歩奥へ

　確かに目的は達成したものの、「HELO As」では何だか不細工だ。もちろん「A
s」の部分を好きなように書き換えることはできるのだが、たった2文字ではどん
な単語を選んだところで、いかんせん格好がつかない。何より気に入らないのは、
まだOllyDbgを起動していないということだ。せっかくクラック系書籍を読んでや
る気になっているところなので、ぜひともOllyDbgでバイナリを解析してみたい。
そんなわけで、もう一歩奥まで踏み込んでみることにした。
　OllyDbgを起動し、Becky!の実行ファイルであるB2.exeを開く。CPUウィンドウ
上で右クリックし、メニューから「Search For」->「All referenced text stri
ngs」を選び、さらにその結果のウィンドウで右クリックしメニューから「Searc
h for text」を選んで「HELO %s」を検索する。このOllyDbgの強力な機能によっ
て、特定の文字列が実行ファイル中のどこから参照されるのかを全て把握するこ
とができる。
　実は最初に解析に挑んだときはこの方法ではなく、メモリ上の「HELO」を検索
し、そのアドレスへのアクセスに対してブレークポイントを仕掛けるという方法
を採ったのだが、その後もっと便利な方法がないかと様々なメニューを探してい
るうちに今回の方法を見つけた。見つけたときにはOllyDbgの強力さに感動すると
ともに筆者自身の解析スキルが大幅に上がったように思ったのだが、その後『ク
ラッカー・プログラム大全』を読んでいたら、106ページでこの方法が解説されて
おり、そこに「この方法に頼りすぎるとスキルが身に付かなくなるので、程ほど
にしましょう」と書いてあって苦笑させられた。すみませんeagle0wl先生。出直
してきます。
　それはさておき、この検索方法によって「HELO %s」は実行ファイル中の3箇所
から参照されていることがわかる。実行時に「HELO %s」という文字列はメモリ上
のアドレス0x005F3FC0にロードされる。これを参照する3つの命令は、どれもpus
h命令によってこの文字列のアドレスをスタックへ格納するものだ。

-----
00505BB8     68 C03F5F00    PUSH B2.005F3FC0                         ;  ASCII "HELO %s"

00505C2B  |. 68 C03F5F00    PUSH B2.005F3FC0                         ;  ASCII "HELO %s"

00505D10  |. 68 C03F5F00    PUSH B2.005F3FC0                         ;  ASCII "HELO %s"
-----

　さて目的は「HELO As」ではなく「HELO DEADBEEF」のように、ある程度の長さ
の好きな英単語を使えるようにすることだ。そこで、B2.exeに存在し、かつ通常
の使用では使われることがなさそうに思われる文字列「HELO localhost」を利用
してしまうことにする。「HELO localhost」はアドレス0x005F3FA4に存在するの
で、上記に挙げた3箇所の命令をすべて次のように書き換えることにする。

-----
68 C03F5F00    PUSH B2.005F3FC0       ; before
68 C03F5F00    PUSH B2.005F3FA4       ; after
-----

　このようにすることで、「HELO %s」の代わりに「HELO localhost」が使われる
ようになる。実際の書き換え作業としてはCPUウィンドウ上で該当する命令を選び、
右クリックしてメニューから「View」->「Executable File」を選んで実行ファイ
ル上でのその命令が格納されているアドレスを確認し、バイナリエディタから行
う。書き換え後にBecky!を起動してメールを送信しヘッダー部を確認してみると、
HELOコマンドは次のようになる。

-----
220 mtools.mixedmedia.net ESMTP
HELO localhost
250 mtools.mixedmedia.net
…（略）…
-----

　最後に、再びバイナリエディタから「HELO localhost」の文字列を「HELO DEA
DBEEF」に書き換えて（余りの部分は0x00で埋めておく）やれば作業は完了だ。

-----
220 mtools.mixedmedia.net ESMTP
HELO DEADBEEF
250 mtools.mixedmedia.net
…（略）…
-----


■0x06.) まとめ

　今回はバイナリファイルを直接いじることでソフトウェアの動作を自分の希望
通りに変更してしまうことに成功した。といっても使用される文字列を一部変更
するだけであり、リバースエンジニアリングのテクニックとしては非常に簡単な
初歩の部類に属すると思われる。データハウスから出版されている『クラッキン
グバイブル』の「リバースエンジニアリング」の章（著者はeagle0wl氏）で非常
に高度な技術を用いた実行ファイルの改造テクニックを目にすることができるの
で、興味がある方はぜひ読んでみてもらいたい。
　技術的には大したことはないのだが、個人的には自分の目的であった「IPアド
レスの漏洩」を防ぎ、かつ好きな文字列を使うことができるようになって、なか
なか気持ちがよい。今後も気にくわない動作をするソフトウェアがあったらリバ
ースエンジニアリングに挑んでみようと思う。

